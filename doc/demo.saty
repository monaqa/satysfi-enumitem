@require: exdesign
@require: article-ja
@require: code
@import: ../enumitem

let label-toi num-format ctx idx =
  let label-width = (get-font-size ctx) *' 3.0 in
  let it-num = num-format idx in
  let ib-label = read-inline ctx {\textbf{問#it-num;.}\ } in
  let (wid-label, _, _) = get-natural-metrics ib-label in
  inline-skip (label-width -' wid-label) ++ ib-label

let-block +mylisting item = '<
  +genlisting(label-bullet)(item);
>

let-block +toi item = '<
  +genlisting(label-toi Enumitem.to-arabic)(item);
>
in

document (|
        title = {enumitem パッケージ};
        author = {monaqa};
        date = {2019/09/07};
        show-title = true;
        show-toc = true;
        style = ArticleJa.a4paper ;
        design = ArticleJa.article;
        header-footer = ArticleJa.normalHF;
        fonts = ArticleJa.fonts;
|) '<
  +section{enumitem パッケージの概要}<
    % ここで基本的な使い方を示す．
    % \genlisting(label-arabic-dot){}
    % という直感的なコマンドで所望のリストが書けることを示す．
    % \genlisting(label-roman-paren){} など直感的に指定可能である．
    % \genlisting(bullet){} など enumerate でないものも含んでいる．

    +p{
      enumitem は，
      組版用言語 \SATySFi; において，
      豊富な箇条書きリストや番号付きのリストを出力するためのパッケージです．
      \SATySFi; に標準で用意されているパッケージとして itemize がありますが，
      enumitem パッケージは標準よりも豊富な機能を提供します．
      具体的には以下のような機能です：
      \listing{
        * デフォルトで選べる豊富なスタイル
        * ユーザーによる容易なスタイル拡張
        * ネストの可能な番号付き箇条書き環境
          （2019年9月現在，標準ではサポートされていません）
      }
      以下では，これらの特徴について具体的に説明します．
    }

    +subsection{デフォルトで選べる豊富なスタイル}<
      +p{
        enumitem パッケージでは，\code(`+genlisting`);というコマンドを提供します．
        これは例えば以下のように使用します．
      }

      +code(```
        +genlisting(label-arabic-dot){
          * hoge
            ** hoge1
            ** hoge2
          * fuga
          * piyo
        }
      ```);

      +p{
        すると，以下のような結果が得られます．結果から分かる通り，
        箇条書きのネストもサポートしています．
      }

      +genlisting(label-arabic-dot){
        * hoge
          ** hoge1
          ** hoge2
        * fuga
        * piyo
      }


      +p{
        \code(`+genlisting`); コマンドの第一引数
        \code(`label-arabic-dot`); は
        「アラビア数字にドットを付けたラベルを用いる」ということを表しています．
        ここを適切に変更することで，以下のように自由自在にラベルを変更することができます．
        たとえばここを\code(`label-roman-paren`);とすれば以下のようなリストになります．
      }

      +genlisting(label-roman-paren){
        * hoge
          ** hoge1
          ** hoge2
        * fuga
        * piyo
      }

      +p{
        2019/09/08 現在，
        \code(`arabic`);,
        \code(`roman`);,
        \code(`Roman`);,
        \code(`alph`);,
        \code(`Alph`);
        の5種類の記号をインデックス部分として選択することができ，
        また，
        \code(`raw`);,
        \code(`dot`);,
        \code(`paren`);,
        \code(`bracket`);,
        の4種類を装飾部分として選択することができます．
      }

      +p{
        番号のつかない箇条書きも同様に
        \code(`+genlisting`); コマンドで生成することができます．
        以下は \code(`label-bullet`); を第一引数としたときの箇条書きの例です．
      }

      +genlisting(label-bullet){
        * hoge
          ** hoge1
          ** hoge2
        * fuga
        * piyo
      }

      +p{
        実用的な文書において，何種類ものスタイルを使い分けなければならない機会というのは稀かもしれません．
        文書中には一種類しか箇条書きが出現しないにもかかわらず，
        箇条書きを書くたびにいちいちスタイルを指定しなければならないのは面倒です．
        幸い，\SATySFi;では\LaTeX;と同じように自分の好きなコマンドを定義することができます．
        もし \code(`+mylisting`); が \code(`+genlisting(label-bullet)`);
        と同様に動作するようにコマンドを定義したければ，プリアンブル部分に以下のように書くことで実現できます:
      }

      +code(```
        let-block +mylisting item = '<
          +genlisting(label-bullet)(item);
        >
        ```);

      +p{
        なお，enumitem パッケージにおけるデフォルトの \code(`+listing`); コマンドも，
        やはり上の方法で \code(`+genlisting`); コマンドから定義されています．
        ラベル指定は \code(`label-bullet`); であり，以下のようなスタイルになっています．
      }

      +listing{
        * hoge
          ** hoge1
          ** hoge2
        * fuga
        * piyo
      }


    >
  >

  +section{コマンドとオプション一覧}<
    % genlisting コマンドの紹介．
    % genlistings コマンドの紹介．
    % ここで初めてちゃんとした定義と，label-arabic-dot などの正体を明かす．
    % listing のエイリアスを簡単に貼れること，デフォルトで定義されていることを示す．
    +p{
      ここで紹介するのは，いわばインターフェースです．
    }
    +subsection{コマンド一覧}<
      +p{
        enumitem パッケージでは，
        箇条書きを作成するためのコマンドとして以下のコマンドが定義されています．
      }
      +p{
        2019年10月27日現在，
        \LaTeX;でいうところの description 環境に相当するコマンドはまだ実装されていません．
      }
    >
    +subsection{インデックス指定パラメータ}<
      +p{
        インデックスを指定するためのパラメータです．
        以下の種類があります．
      }

      +p{
        これらの正体が何であるか，気になる方もいると思います．
        \code(`+genlisting`); の第1引数に指定する列挙型のごとく振る舞っていますが，
        その実体は「現在のテキスト処理文脈とインデックス値を受け取り，
        ラベルとすべきインラインボックス列を返す」役割を持った
        \code(`context -> int -> inline-boxes`); 型の関数です．
        後述するようなカスタマイズを行わない限り
        ユーザがこの関数を再定義したり明示的に引数を渡したりする機会はないため，
        本文中では列挙型と同じように扱うことができます．
        逆に言えば，
        ユーザ側が \code(`context -> int -> inline-boxes`); 型の関数を定義したならば，
        それがそのままユーザ定義された新たなインデックス指定パラメータとなります．
      }
    >
  >

  +section{カスタマイズ}<
    +p{
      ここでは，enumitem パッケージを用いて自身の好みの箇条書き環境を作成するには
      どのようにすればよいかについて述べます．
      内部の実装や型についても触れます．
    }
    % label-arabic-dot の型と同じものを用意すれば簡単にカスタマイズできると述べ，
    % 問1. や Step1. などの enumerate コマンドを実際に作ってみせる．
    % 問1. については，フォントをはじめとした ctx も変更可能であると示す．
    % 四角囲みの1 などがあってもいいかも．

    +subsection{単純な実装：数字の装飾を変える}<
      +p{
        前章のコマンド一覧で紹介したとおり，
        enumitem パッケージではすでに 20 以上のインデックス指定関数が定義されています．
        しかし，それらはそれぞれ独立に定義されているわけではなく，
        効率的にコードを使い回すように定義しています．
        現に番号付きのインデックス指定関数を見れば，
        それらは実際には2つの要素の掛け合わせで構成されている（数学的には直積）
        ことが容易にわかるでしょう．
        具体的には，たとえば \code(`label-arabic-raw`);関数は以下のように定義されています:
      }
      +code(```
      let label-arabic-raw = Enumitem.label-raw Enumitem.to-arabic
      ```);
      +p{
        ここで \code(`Enumitem.label-raw`); は
        \code(`(int -> inline-text) -> context -> int -> inline-boxes`);
        の型を持つ関数であり，
        一方で \code(`Enumitem.to-arabic`); は
        \code(`int -> inline-text`);
        の型を持つ関数です．
      }
      +p{
        enumitem パッケージ内では，このように
        5種類の to- 型関数
        (
          \code(`Enumitem.to-arabic`);,
          \code(`Enumitem.to-roman`);,
          \code(`Enumitem.to-Roman`);,
          \code(`Enumitem.to-alph`);,
          \code(`Enumitem.to-Alph`);
        )
        と4種類の label- 型関数
        (
          \code(`Enumitem.label-raw`);,
          \code(`Enumitem.label-dot`);,
          \code(`Enumitem.label-paren`);,
          \code(`Enumitem.label-bracket`);
        )
        を定義することにより，20種類のインデックス指定関数を生み出しています．
      }
      +p{
        この性質をうまく使えば，ユーザ定義の箇条書き環境をかんたんに定義することができます．
        たとえば，「\textbf{問1.}\ 」のようなインデックスを持つ箇条書き環境を定義してみましょう．
        1 はアラビア数字ですから，\code(`Enumitem.to-arabic`);関数をそのまま用いることができます．
      }
      +toi{
        * こんな感じ．
        * こんなふうにできる．
      }

    >
  >
>
