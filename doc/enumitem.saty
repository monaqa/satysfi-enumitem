@require: stdjabook
@require: code
@require: color
@require: hdecoset
@require: vdecoset
@import: ../enumitem

open Enumitem

% custom commands
let-block ctx +ctx ctxf bt = read-block (ctxf ctx) bt

let document record bt = StdJaBook.document record '<%
  +ctx(fun ctx -> (
    let fsize = get-font-size ctx in
    ctx |> set-paragraph-margin fsize fsize
        % |> set-font-size 5pt
        |> set-leading (fsize *' 1.6)
        |> set-code-text-command (command \code)
    % ctx
  ))(bt);
  >%

let font-ratio-latin = 1.
let font-ratio-cjk = 0.88
let font-latin-italic = (`Junicode-it`, font-ratio-latin, 0.)
let font-cjk-gothic   = (`ipaexg`    , font-ratio-cjk  , 0.)
let-inline ctx \emph inner =
  let ctx-bf =
    ctx |> set-font Latin font-latin-italic
        |> set-font HanIdeographic font-cjk-gothic
        |> set-font Kana font-cjk-gothic
  in
    read-inline ctx-bf inner

let-block ctx +block-frame bt = 
  let decoset = VDecoSet.simple-frame 0.5pt Color.black Color.white in
  block-frame-breakable ctx (5pt, 5pt, 10pt, 10pt) decoset (fun ctx -> read-block ctx bt)

let-block +example str bt =
  '<%
    +code(str);
    +block-frame(bt);
  >%

let-inline \jugem = {
  寿限無，寿限無，五劫のすりきれ，
  海砂利水魚の水行末・雲来末・風来末，
  食う寝るところに住むところ，
  やぶら小路のぶら小路，
  パイポパイポ，パイポのシューリンガン，
  シューリンガンのグーリンダイ，
  グーリンダイのポンポコピーのポンポコナーの長久命の長助．
}


% custom itemizes
let tmp-label = EnumitemBase.make-param bullet
let-inline \label labelf = {\set-item(tmp-label)(labelf);}
let-block +label-demo item = '<%
  +xgenlisting(fun idx ctx -> (Param.get tmp-label) idx ctx)(default-item)(item);
>%

let square-label is-checked ctx =
  let fs value = (get-font-size ctx) *' value in
  let fsize = fs 1.0 in
  let gr-square (x, y) =
    stroke 0.5pt Color.black (Gr.rectangle (0pt, 0pt) (fs 0.5, fs 0.5 ))
      |> shift-graphics (x, y +' fs 0.15)
  in
  let gr-mark-done (x, y) =
    stroke 0.5pt Color.black (
      Gr.poly-line (fs (0.0 -. 0.1), fs 0.45) [(fs 0.15, fs 0.15); (fs 0.75, fs 0.85)])
        |> shift-graphics (x, y +' fs 0.15)
  in
  let gr point =
    if is-checked then
      [gr-square point; gr-mark-done point]
    else
      [gr-square point]
  in
  inline-skip 10pt ++ (inline-graphics fsize fsize 0pt gr)

let done = EnumitemBase.make-param false
let-inline \done = {\set-item(done)(true);}
let-block +todo-list item = '<%
  +xgenlisting(fun idx ctx -> square-label (Param.get done) ctx)(default-item)(item);
>%

let example idxlst ctx =
  let idx-to-ib idx =
    (read-inline ctx (embed-string (arabic idx)))
      ++ (read-inline ctx {.})
  in
  idxlst |> List.map idx-to-ib
         |> List.fold-left (++) inline-nil

let label-toi (idx :: _) ctx =
  let it-num = embed-string (arabic idx) in
  read-inline ctx {問#it-num;.\ }

let label-toi-nest idxlst ctx =
  let str-nums =
    idxlst |> List.reverse
           |> List.map (fun idx -> arabic idx ^ `.`)
           |> List.fold-left (^) ` `
  in
  let it-num = embed-string str-nums in
  read-inline ctx {問#it-num;\ }

let label-japanese-ichi _ ctx = read-inline ctx {一} ++ inline-skip 10pt

let-inline ctx \simple-frame it =
  let pads = (2pt, 2pt, 2pt, 2pt) in
  let decos = HDecoSet.simple-frame-stroke 1pt (Color.black) in
  inline-frame-breakable pads decos (read-inline ctx it)

let framed-Roman (idx :: _) ctx =
  let label-width = (get-font-size ctx) *' 3.0 in
  let it-num = Enumitem.to-Roman idx in
  let ib-label = read-inline ctx {\simple-frame{#it-num;}\ } in
  let (wid-label, _, _) = get-natural-metrics ib-label in
  inline-skip (label-width -' wid-label) ++ ib-label

let-block +description item = '<%
  +gendescription(|
    desc-config with
    inner-indent = (fun title-wid -> 30pt);
    % let ctx-title = ctx |> set-paragraph-margin 12pt 8pt in
    title-func = (fun ctx title -> read-inline ctx {\emph{#title;}} );
  |)(item);
>%

let-block +parameters item = '<%
  +gendescription(|
    nextline = false;
    title-inner-gap = 10pt;
    inner-indent = (fun title-wid -> 30pt);
    title-func =
      (fun ctx title -> read-inline ctx {\emph{#title;}} );
  |)(item);
>%

let paren-arabic-gray idxlst ctx =
  let ctx2 = ctx |> set-text-color (Color.gray 0.7) in
  paren-arabic idxlst ctx2

let gray-item ctx =
  let ctx2 = ctx |> set-text-color (Color.gray 0.7) in
  default-item ctx2

in

document (|
  title = {Enumitem パッケージ};
  author = {\@monaqa};
  date = {2020/06/13};
  show-title = true;
  show-toc = true;
|) '<%

  +section{本パッケージの概要}<%
    +p{
      Enumitem は，組版システム \SATySFi; において
      豊富な箇条書きリストや番号付きのリストを出力するためのパッケージです．
      \SATySFi; には既に itemize というパッケージが標準で用意されていますが，
      本パッケージではより豊富な機能を提供します（2020年5月23日現在）．

      具体的には， 本パッケージを使うことで以下のような恩恵を受けられます．
      \listing{
        * デフォルトで豊富なスタイルを選択できる
        * 番号付き箇条書き環境をネストさせることができる\footnote{2020年5月現在，標準ではサポートされていません．}
        * 定義リストを作成できる
        * ネストごとに箇条書きのスタイルを変更できる
        * ユーザ自身がスタイルを容易に拡張できる
      }
    }
    +p{
      なお本ドキュメントは，enumitem パッケージ (v2.0.0) の仕様および使い方について述べたものです．
      本パッケージは v1.x.x から v2.0.0 にバージョンアップする際にほぼ全てのコマンドの仕様を変更しており，
      v1.x.x を使っている場合はこのドキュメントに書かれている内容では動きません．
      旧バージョンの enumitem パッケージを用いたい場合は旧版ドキュメントを確認してください．
    }
  >%

  +section{基本的な使い方}<%
    +p{
      パッケージを使うには当然ながら読み込みを行う必要があります．
      パッケージのソースファイルが \SATySFi; の処理系の認識可能な位置に置かれていれば，
      文書の冒頭に以下の1行を追加するだけで読み込むことができます．
      本書では，以下常に `enumitem` パッケージが読み込まれているものとして説明を行います．
    }

    +code(```
    @require: enumitem
    ```);

    +p{
      本パッケージは標準のものと同様，
      `+listing` 及び `+enumerate` という箇条書きインターフェースを提供します．
      デフォルトでは以下のように箇条書きを書くことができます．
    }

    +example(```
      +listing{
        * hoge
        * fuga
          ** fuga1
            *** fuga11
            *** fuga12
          ** fuga2
      }
    ```)<%
      +listing{
        * hoge
        * fuga
          ** fuga1
            *** fuga11
            *** fuga12
          ** fuga2
      }
    >%


    +example(```
      +enumerate{
        * hoge
        * fuga
          ** fuga1
            *** fuga11
            *** fuga12
          ** fuga2
      }
    ```)<%
      +enumerate{
        * hoge
        * fuga
          ** fuga1
            *** fuga11
            *** fuga12
          ** fuga2
      }
    >%

    +p{
      このように番号つき箇条書き環境のネストもサポートしており，
      ネストの深さによってラベルの体裁を変えることができます．
    }

    +p{
      また，文章の途中で箇条書きをはさむ場合は
      `\listing` や `\enumerate` コマンドを使うことで改段落を伴わずに箇条書きを挿入できます．
    }

    +example(```
    +p{
      寿限無，寿限無，五劫のすりきれ，
      海砂利水魚の
      \listing{
        * 水行末
        * 雲来末
        * 風来末
      }
      食う寝るところに住むところ...
    }
    ```)<%
      +p{
        寿限無，寿限無，五劫のすりきれ，
        海砂利水魚の
        \listing{
          * 水行末
          * 雲来末
          * 風来末
        }
        食う寝るところに住むところ...
      }
    >%

    +p{
      ここまでの使用法は標準パッケージで提供されるものと大きく変わりません．
    }
  >%

  +section{ラベルの体裁の指定}<%
    +p{
      本パッケージが提供する `+listing` や `+enumerate` といったコマンドは，
      箇条書きのラベル（項目の先頭につく数字や記号）の体裁を指定されたものに変更する機能も持っています．
    }

    +subsection{ `+listing` のオプション引数を用いた指定}<%
      +p{
        `+listing` 及び `+enumerate` は以下のように1つのオプション引数を受け付け，
        ラベルの体裁を指定することができます．
      }
      +example(```
      +listing?:(Enumitem.white-bullet){
        * hoge
          ** hoge1
          ** hoge2
        * fuga
        * piyo
      }
      ```)<%
        +listing?:(Enumitem.white-bullet){
          * hoge
            ** hoge1
            ** hoge2
          * fuga
          * piyo
        }
      >%
      +example(```
      +enumerate?:(Enumitem.dot-arabic){
        * hoge
          ** hoge1
          ** hoge2
        * fuga
        * piyo
      ```)<%
        +enumerate?:(Enumitem.dot-arabic){
          * hoge
            ** hoge1
            ** hoge2
          * fuga
          * piyo
        }
      >%

      +p{
        上の例における `white-bullet` や `dot-arabic` は
        `Enumitem` と呼ばれるモジュール内で定義されており， `labelfmt` 型を持ちます．
        モジュール内で定義されている `labelfmt` 型の値は他にも多数存在し，
        それらをオプション引数に渡すことで箇条書きを模様替えできるという仕組みです．
      }

      +p{
        なお，実際のマークアップで変数名の前に `Enumitem.`
        を付けるのは多少面倒と感じられるかもしれません．
        `Enumitem` モジュールを open すれば，それ以降モジュール名を省略することができます．
      }

      +code(```
      @require: enumitem
      open Enumitem
      in
      document(| 中略 |)'<
        +listing?:(white-bullet){
          * hoge
          * fuga
        }
      >
      ```);

      +p{
        このように書くと， `Enumitem` モジュール内で定義された値や関数の前に
        `Enumitem.` を付ける必要がなくなります．
        その代わり，他のパッケージやユーザで定義した関数名と衝突しないようにするのは使用者の責任となります．
        % 本パッケージでは， `+listing` や `+enumerate` といったコマンドについては名前空間を省略できるようにしていますが，
        % `raw-arabic` などの関数名は open しない限りモジュール名を省略できないようにしています．
      }

      +p{
        また，箇条書きを書くときにいちいち同じオプション引数を付けるのは面倒だと感じられるかもしれません．
        その場合は最初に `+listing` のデフォルトの挙動を変更してもよいでしょう．
        プリアンブル部分に以下のように書くと，
        以下のコードでは `+listing` を用いた場合は常に白丸がラベルとして使われるようになります．
      }

      +code(```
      let-block +listing item = '<
        +Enumitem.listing?:(Enumitem.white-bullet)(item);
      >
      ```);

      % +p{
      %   なお，もともとの「 `Enumitem` モジュールの `+listing` コマンド」を使いたくなった場合も，
      %   `+listing` の代わりに `+Enumitem.listing` と表記することで，
      %   ユーザー定義された `+listing` コマンドと区別することができます．
      % }

      +p{
        余談ですが，`+listing` と `+enumerate` の違いはオプション引数を省略したときのデフォルトの体裁のみであり，
        オプション引数を設定すると内部での処理は全く同一となります．
        したがって， `+listing?:(Enumitem.dot-arabic)` のように `+listing` で番号付き箇条書きを書くことも，
        `+enumerate?:(Enumitem.bullet)` のように `+enumerate` で番号のない箇条書きを書くことも可能ではあります
        \footnote{もちろん仕組み上そうなっているというだけであり，
        番号のない箇条書きには `+listing` を，番号付きには `+enumerate` を，などと
        使い分けたほうが可読性は向上するでしょう．}．

      }
    >%

    +subsection{ラベルの体裁を定める変数一覧}<%
      +p{
        以下は `Enumitem` モジュール内で定義されている体裁指定用変数の一覧です．
        番号付きの箇条書きを行いたい場合は，以下の変数を使用できます．
      }

      +label-demo{
        * アラビア数字系

          ** `raw-arabic` \label(raw-arabic);
          ** `dot-arabic` \label(dot-arabic);
          ** `paren-arabic` \label(paren-arabic);
          ** `bracket-arabic` \label(bracket-arabic);

        * ローマ数字系

          ** `raw-roman` \label(raw-roman);
          ** `raw-Roman` \label(raw-Roman);
          ** `dot-roman` \label(dot-roman);
          ** `dot-Roman` \label(dot-Roman);
          ** `paren-roman` \label(paren-roman);
          ** `paren-Roman` \label(paren-Roman);
          ** `bracket-roman` \label(bracket-roman);
          ** `bracket-Roman` \label(bracket-Roman);

        * アルファベット系

          ** `raw-alph` \label(raw-alph);
          ** `raw-Alph` \label(raw-Alph);
          ** `dot-alph` \label(dot-alph);
          ** `dot-Alph` \label(dot-Alph);
          ** `paren-alph` \label(paren-alph);
          ** `paren-Alph` \label(paren-Alph);
          ** `bracket-alph` \label(bracket-alph);
          ** `bracket-Alph` \label(bracket-Alph);
      }

      +p{
        また，番号の無い箇条書きには以下の変数を使用できます．
      }

      +label-demo{
        * `bullet` \label(bullet);
        * `white-bullet` \label(white-bullet);
      }
    >%

    +subsection{ラベルの体裁をユーザ定義する方法}<%
      +p{
        ここまでの説明で，「 `dot-arabic` 等は `labelfmt` 型の関数だ」と述べましたが，
        そもそも `labelfmt` 型とは何でしょうか．
        実は `labelfmt` 型とは `int list -> context -> inline-boxes` という型のシノニムであり，
        \listing{
          * 箇条書きのラベルのリスト (`int list`)
          * 現在の本文のテキスト処理文脈 (`context`)
        }
        を入力として，
        箇条書きのラベルを描画するインラインボックス列 (`inline-boxes`) を返す関数を表します．
        これは必ずしも予めモジュール内で用意された関数である必要はありません．
        つまり，`labelfmt` 型を持つ関数を自作して `+listing` コマンドのオプション引数に渡せば，
        自分の定義したラベル表示を持つ箇条書きを作成することができます．
      }

      +p{
        `labelfmt` の使い方を説明するため，
        まず `labelfmt` 型を持つ比較的単純な関数を定義してみましょう．
        下のコードを動かすには，標準で提供されている `list` パッケージを読み込む必要があります．
      }

      +code(```
      let example idxlst ctx =
        let idx-to-ib idx =
          (read-inline ctx (embed-string (arabic idx)))
            ++ (read-inline ctx {.})
        in
        idxlst |> List.map idx-to-ib
               |> List.fold-left (++) inline-nil
      ```);

      +p{
        この関数は`labelfmt (int list -> context -> inline-boxes)` 型を持ちます．
        まず，関数内部で定義された `idx-to-ib` は `int -> inline-boxes` 型を持つクロージャであり，
        この関数を `idxlst` の要素のそれぞれに適用して `inline-boxes list` 型へと変換します．
        続いて得られたリストを左から結合することにより，最終的な `inline-boxes` 型の値を得ます．
        したがって，もし example の第1引数に `[2; 3; 5; 7]` というリストが与えられた場合，
        （第2引数のテキスト処理文脈により組み方は変わりますが）
        「2.3.5.7.」という数字の列を持ったインラインボックス列が出力となります．
      }

      +p{
        では，この `example` を `+listing` に指定するとどうなるでしょうか．
        実際に組んでみると以下のようになります．
      }

      +example(```
        +listing?:(example){
          * あああ
          * いいい
          * ううう
            ** ああああ
            ** いいいい
            ** うううう
          * えええ
            ** ああああ
              *** あああああ
              *** いいいいい
              *** ううううう
            ** いいいい
          * おおお
        }
      ```)<%
        +listing?:(example){
          * あああ
          * いいい
          * ううう
            ** ああああ
            ** いいいい
            ** うううう
          * えええ
            ** ああああ
              *** あああああ
              *** いいいいい
              *** ううううう
            ** いいいい
          * おおお
        }
      >%

      +p{
        結果を見れば規則性が分かると思いますが，
        `+listing` コマンドは `labelfmt` 型の関数が与えられたとき，
        `labelfmt` に「現在の箇条書きの項目が何番目か」という情報（インデックス）を格納したリストと
        現在のテキスト処理文脈の2つを渡し，出てきた出力をそのまま箇条書きのラベルとします．
        なお，与えられるインデックスのリストでは
        ${n} 番目に深いリストのインデックスが「末尾から数えて ${n} 番目の要素」 に格納されています．
        つまりリストの先頭にあるものが最も深い，末尾にあるものが最も浅いネストの番号となります．
        これは少し直感に反するかもしれませんが，
        逆に並べるより実装が楽になることが多いためこのような仕様にしました．
      }

      +p{
        この仕様さえ理解すれば，好きな箇条書き環境を定義できます．
        たとえば，「問1.\ 」のようなラベルは以下のようにして実装できます．
      }

      +code(```
      let label-toi idxlst ctx =
        let idx = match idxlst with
          | [] -> 1
          | idx :: _ -> idx
        in
        let it-num = embed-string (arabic idx) in
        read-inline ctx {問#it-num;.\ }
      ```);

      +p{
        `let idx = ...` から始まる行で `idxlst` の一番最初の要素を取り出し，
        それをインラインテキストに変換しています．
        実際には enumitem パッケージの内部で `label-toi` の引数に空リストが与えられることはないはずであり，
        それを踏まえればもう少し簡潔に書くこともできます \footnote{
          ただし，ユーザが故意に与えた， 本パッケージに不具合があったなどの理由で
          `label-toi` の引数に空リストが与えられてしまった場合は実行時エラーとなるため，
          その点には注意が必要です．
        }．
      }

      +code(```
      let label-toi (idx :: _) ctx =
        let it-num = embed-string (arabic idx) in
        read-inline ctx {問#it-num;.\ }
      ```);

      +p{
        話が少しそれました．実際に `label-toi` を使ってみましょう．
      }

      +example(```
        +enumerate?:(label-toi){
          * hoge
          * fuga
            ** fuga1
              *** fuga11
              *** fuga12
            ** fuga2
        }
      ```)<%
        +enumerate?:(label-toi){
          * hoge
          * fuga
            ** fuga1
              *** fuga11
              *** fuga12
            ** fuga2
        }
      >%

      +p{
        このようにネストがある場合でも，
        ネストに応じて適宜リセットされながらラベルが表示されることが分かります．
        では，もし以下のように定義したらどうなるでしょうか．
      }

      +code(```
        let label-toi-nest idxlst ctx =
          let str-nums =
            idxlst |> List.reverse
                   |> List.map (fun idx -> arabic idx ^ `.`)
                   |> List.fold-left (^) ` `
          in
          let it-num = embed-string str-nums in
          read-inline ctx {問#it-num;\ }
      ```);

      +p{
        ある程度予想がついたかもしれませんが，ラベルもネストされた状態で表示されます．
      }

      +example(```
        +enumerate?:(label-toi-nest){
          * hoge
          * fuga
            ** fuga1
              *** fuga11
              *** fuga12
            ** fuga2
        }
      ```)<%
        +enumerate?:(label-toi-nest){
          * hoge
          * fuga
            ** fuga1
              *** fuga11
              *** fuga12
            ** fuga2
        }
      >%

      +p{
        なお，第1引数を関数内で使わなければ，番号のない箇条書きの体裁も作成できます．
      }

      +code(```
        let label-japanese-ichi _ ctx =
          read-inline ctx {一} ++ inline-skip 10pt
      ```);

      +p{
        番号つき箇条書きよりも更にシンプルな定義になりました．
        このように定義された箇条書きは以下のように用いることができます．
      }

      +example(```
        +listing?:(label-japanese-ichi){
          * 廣ク會議ヲ興シ萬機公論ニ決スベシ
          * 上下心ヲ一ニシテ盛ニ經綸ヲ行フべシ
          * 官武一途庶民ニ至ル迄各其志ヲ遂ケ人心ヲシテ倦マサラシメン事ヲ要ス
          * 舊來ノ陋習ヲ破リ天地ノ公道ニ基クべシ
          * 智識ヲ世界ニ求メ大ニ皇基ヲ振起スべシ
        }
      ```)<%
        +listing?:(label-japanese-ichi){
          * 廣ク會議ヲ興シ萬機公論ニ決スベシ
          * 上下心ヲ一ニシテ盛ニ經綸ヲ行フべシ
          * 官武一途庶民ニ至ル迄各其志ヲ遂ケ人心ヲシテ倦マサラシメン事ヲ要ス
          * 舊來ノ陋習ヲ破リ天地ノ公道ニ基クべシ
          * 智識ヲ世界ニ求メ大ニ皇基ヲ振起スべシ
        }
      >%
    >%

    +subsection{便利な関数}<%
      +p{
        ネストの深さに応じて箇条書きのラベルを変えたい，という要求は珍しくありません．
        ラベルの体裁を自身で定義すれば当然そういった箇条書きも作成できます．
        しかし，既存の体裁を使いまわしたいのであれば，
        `Enumitem.change-by-depth` 関数を用いるのがより簡単です．
      }

      +example(```
        +listing?:(
          Enumitem.change-by-depth [
            Enumitem.bracket-Alph; Enumitem.white-bullet;
            Enumitem.paren-arabic;
          ]
        ){
          * hoge
          * fuga
            ** fuga1
              *** fuga11
              *** fuga12
            ** fuga2
        }
      ```)<%
        +listing?:(
          Enumitem.change-by-depth [
            Enumitem.bracket-Alph; Enumitem.white-bullet; Enumitem.paren-arabic;
          ]
        ){
          * hoge
          * fuga
            ** fuga1
              *** fuga11
              *** fuga12
            ** fuga2
        }
      >%
    >%
  >%

  +section{本文の体裁の指定}<%
    +p{
      前節でラベルの体裁の変更方法を説明しましたが，
      `+listing` コマンドで指定できるのはラベルの体裁のみであり，
      本文のフォントや本文が複数行に渡るときのインデント量といった，
      本文に関係する体裁を指定することはできませんでした．
      そういった要素にも変更を加えたい場合は，
      箇条書きコマンド `+listing` や `+enumerate` をより一般化した `+genlisting` コマンドを使用します．
      `+genlisting` は `+listing` にくらべて複雑なインターフェースを持ちますが，
      その分自由度が高く
      \listing{
        * 本文のフォントサイズや色といった体裁
        * 箇条書きの項目間の幅
        * 1つの項目内で行を折り返すときのインデント幅
        * ネストするときに追加されるインデントの幅
      }
      といった項目を全てこの関数1つで制御することができます．
    }

    +subsection{`+genlisting` コマンドの仕様}<%

      +p{
        実は，`+listing` や `+enumerate` コマンドも `+genlisting` を用いて定義されています．
        まずは `+listing` コマンドがパッケージ内部でどのように定義されているか見てみましょう．
      }

      +code(```
        let-block ctx +listing ?:labelf item =
          let labelf = Option.from bullet labelf in
          read-block ctx '<+genlisting(labelf)(default-item)(item);>
      ```);

      +p{
        このように， `+genlisting` は
        `+genlisting(labelf)(itemf)(item);` という形で用いられます
        （オプション引数はありません）．
        個々の引数の意味は以下のとおりです．
      }

      +parameters{
        * labelf
          ** (`labelfmt (int list -> context -> inline-boxes)`)
          ** ラベルの体裁を指定する関数．

        * itemf
          ** (`context -> int -> inline-boxes -> inline-text -> block-boxes`)
          ** ラベル及び本文の組み方を指定する関数．
             以下の引数を与えると，箇条書きの項目を組んでブロックボックス列を返す:
             \enumerate{
               * 箇条書きが組まれる位置でのテキスト処理文脈 (`context`)，
               * 対象となる項目の深さ (`int`)．
               * 対象となる項目にて組まれることになるラベル (`inline-boxes`)．
               * 本文を表すインラインテキスト (`inline-text`)
             }

        * item
          ** (`itemize`)
          ** 箇条書きの内容．
      }

      +p{
        1番目は `+listing` のオプション引数，3番目は `+listing` の必須引数と同じものですが，
        `+genlisting` では追加で2番目に `itemf` 引数を指定することができます．
        これは「深さとラベルと本文が与えられたときに，
        箇条書きの1つの項目を組んでブロックボックス列にする」
        関数であり，まさに箇条書きの体裁を直接指定する自由度の高い関数です．
      }

      +p{
        `+genlisting` コマンドが呼び出されると，以下の処理を再帰的に行うことで箇条書きを組みます．
        再帰的な処理と一項目に対する処理を分離することで，
        柔軟性の高い箇条書きが表現できる仕組みとなっています．
      }

      +enumerate{
        * 第1引数で与えられた `labelf` を用いて親項目のラベルを組む．
        * 第2引数で与えられた `itemf` を用いて親項目の本文を組む
          （そのときに先程組んだラベルのインラインボックス列を渡す）．
        * 子項目を親と同じ要領で組み，親項目のブロックボックス列の下に結合する．
      }

    >%

    +subsection{`+genlisting` を用いた指定}<%

      +p{
        `+listing` の定義の中で `+genlisting` の第2引数に渡されているのは `default-item` という関数です．
        これは `Enumitem.default-item` とすることで使用でき，
        実際には以下のように定義されています：
      }

      +code(```
        let default-item ctx depth ib-label text =
          let text-indent =
            let fsize = get-font-size ctx in
            fsize *' ((Param.get item-indent-ratio) *. (float depth))
          in
          let ib-text =
            let index-width = get-natural-width ib-label in
            let item-text-width =
              (get-text-width ctx) -' text-indent -' index-width
            in
            embed-block-top ctx item-text-width (fun ctx ->
              line-break true true ctx (read-inline ctx text ++ inline-fil)
            )
          in
          line-break true true ctx
            ((inline-skip text-indent) ++ ib-label ++ ib-text)
      ```);

      +p{
        この関数には，ラベルを受け取って本文を組み上げる処理の本質が書かれています．
        基本的にはこの関数をいろいろいじって自分好みの関数に仕上げ，
        それを `+genlisting` の第2引数にわたすことによって，
        箇条書きの体裁を自由に変更することができます．
        しかし，本文のテキスト処理文脈をいじる程度の変更であれば，
        `default-item` をそのまま用いて比較的簡単に実装することができます．
      }

      +example(```
        % プリアンブルに書く
        let gray-item ctx =
          let ctx2 = ctx |> set-text-color (Color.gray 0.7) in
          Enumitem.default-item ctx2

        % 本文中に書く
        +genlisting(Enumitem.paren-arabic)(gray-item){
          * hoge
          * fuga
            ** fuga1
              *** fuga11
              *** fuga12
            ** fuga2
        }
      ```)<%
        +genlisting(Enumitem.paren-arabic)(gray-item){
          * hoge
          * fuga
            ** fuga1
              *** fuga11
              *** fuga12
            ** fuga2
        }
      >%
      +p{
        見ての通り，第2引数の関数内部でテキスト処理文脈を変更してもラベルの色は変化しません．
        ラベルと本文のインラインボックス列は別のテキスト処理文脈に基づいて組まれるためです．
        ラベルの色を変更したい場合は，前節で説明したように第1引数を変更します．
      }
      +example(```
        % プリアンブルに書く
        let paren-arabic-gray idxlst ctx =
          let ctx2 = ctx |> set-text-color (Color.gray 0.7) in
          Enumitem.paren-arabic idxlst ctx2

        % 本文中に書く
        +genlisting(paren-arabic-gray)(gray-item){
          * hoge
          * fuga
            ** fuga1
              *** fuga11
              *** fuga12
            ** fuga2
        }
      ```)<%
        +genlisting(paren-arabic-gray)(gray-item){
          * hoge
          * fuga
            ** fuga1
              *** fuga11
              *** fuga12
            ** fuga2
        }
      >%

    >%
  >%

  +section{グローバルパラメータを用いた指定}<%
    +p{
      本パッケージで制御できる箇条書きの体裁は，
      ほぼ全て今までに述べてきた方法でカスタマイズすることができます．
      とはいえ，ユーザが何かを変更したいと思うたびに，
      それに応じて新たな関数を用意しなければならないのは面倒かもしれません．
      たとえば，箇条書きの字下げ幅は本来1自由度しかありませんから
      1つのパラメータの値を変更すれば対処できそうなものですが，
      今までの方法では「箇条書きの字下げ幅を変更した本文体裁指定用関数」を新たに定義する必要があります．
      その面倒さを避けるため， 本パッケージではいくつかの設定項目を「グローバルパラメータ」として保持しており，
      必要に応じて狙い撃ちして変更することができます．
    }

    +subsection{グローバルパラメータの種類}<%
      +p{
        現時点では，以下のグローバルパラメータが `Enumitem` モジュールに用意されています．
      }

      +parameters{
        * item-indent-ratio
          ** float 型のパラメータ (default: 2.0)
          ** 現在のフォントサイズに対する相対的な割合を指定して，
             箇条書きのネストが行われたときに，自分の親の項目から行うインデントの量を表す．

        * label-width-ratio
          ** float 型のパラメータ (default: 2.0)
          ** 現在のフォントサイズに対する相対的な割合を指定して，
             デフォルトで定義されている `raw-arabic` や `bullet` などのラベルの幅を表す．
             これらのラベルは右揃えで組まれるが，
             その際に必ず (`font-size *' label-width-ratio`) の分だけの空白が左端から確保される．
      }

      +p{
        「float 型のパラメータ」 と便宜上書いているものは，
        正確には `Param` モジュールにて定義された `float Param.t` という型です．
        パラメータを指定したりデフォルト値を設定したりするインターフェースが用意されているものの，
        基本的には `float ref` と似たような型である，という理解で問題ありません．
      }
      +p{
        なお，新たなグローバルパラメータをユーザ定義することもできますが，
        箇条書きという趣旨から外れるためここでは割愛します
        \footnote{気になる場合は，
        本パッケージのソースを読んでいただければなんとなく使い方が分かるかと思います．}．
      }
    >%

    +subsection{パラメータの値の変更}<%
      +p{
        これらのパラメータに好きな値を設定する方法はいくつかあります．
        1つ目は，プリアンブル部分で以下のように指定する方法です．
        文書全体に共通する値を指定するときに使います．
      }
    >%

    +code(```
      let () = Enumitem.item-indent-ratio |> Param.set 5.0
    ```);

    +p{
      このように書くと，
      本文中では常に `item-indent-ratio` の値が 5.0 であるものとして組まれます．
      `Param.set` は `'a -> 'a Param -> unit` 型を持つ関数で，
      指定したパラメータに特定の値を代入することができます．
    }

    +p{
      2つ目は，本文中で
      `+set-param` や `\set-param` コマンドを用いる方法です．
      この方法を用いると，本文の途中であってもパラメータを変更することができます．
    }

    +example(```
      +listing{
        * hogehoge
        * fugafuga
      }
      +set-param(Enumitem.label-width-ratio)(4.0);
      +p{ここからラベルの幅が広くなる．}
      +listing{
        * hogehoge
        * fugafuga
      }
      +p{ここからラベルの幅が狭くなる．
         \set-param(Enumitem.label-width-ratio)(1.0);}
      +listing{
        * hogehoge
        * fugafuga
      }
    ```)<%
      +listing{
        * hogehoge
        * fugafuga
      }
      +set-param(Enumitem.label-width-ratio)(4.0);
      +p{ここからラベルの幅が広くなる．}
      +listing{
        * hogehoge
        * fugafuga
      }
      +p{ここからラベルの幅が狭くなる．
         \set-param(Enumitem.label-width-ratio)(1.0);}
      +listing{
        * hogehoge
        * fugafuga
      }
    >%
    +set-param(label-width-ratio)(2.0);

    +p{
      しかし，パラメータを途中から永続的に変えるのは，
      後ろの原稿に思わぬ影響を与えうるという点で多少リスキーでもあります．
      そこで，3つ目の方法として一時的にパラメータの値を変更するインターフェースも用意されています．
      以下の `+with-param` や `\with-param` コマンドを用います．
    }
    +example(```
      +listing{
        * hogehoge
        * fugafuga
      }
      +with-param(Enumitem.label-width-ratio)(4.0)<
        +p{ここだけラベルの幅が広くなる．}
        +listing{
          * hogehoge
          * fugafuga
        }
      >
      +p{ここはラベルの幅が前と同じ．}
      +listing{
        * hogehoge
        * fugafuga
      }
    ```)<%
      +listing{
        * hogehoge
        * fugafuga
      }
      +with-param(Enumitem.label-width-ratio)(4.0)<
        +p{ここだけラベルの幅が広くなる．}
        +listing{
          * hogehoge
          * fugafuga
        }
      >
      +p{ここはラベルの幅が前と同じ．}
      +listing{
        * hogehoge
        * fugafuga
      }
    >%

  >%

  +section{動的なフラグを用いたラベル操作}<%
    +subsection{`+xgenlisting` コマンド}<%
      +p{
        たとえば，以下のような To-Do リストを作成したくなったとします．
      }

      +block-frame<%
        +todo-list{
          * ミルクを買う．
          * The \SATySFi;book を読む．
          * \done; \SATySFi; を完全に理解する．
          * 課題を解く．
        }
      >%

      +p{
        簡単のため，ラベルを作成するための関数は既に用意されているものとしましょう．
        たとえば，以下の関数 `square-label` は `bool -> context -> inline-boxes` 型を持ち，
        第1引数 `is-checked` が true のときチェック済みのチェックボックスを，
        false のときチェック済みでないチェックボックスを描画します．
      }
      +code(```
        let square-label is-checked ctx =
          let fs value = (get-font-size ctx) *' value in
          let fsize = fs 1.0 in
          let gr-square (x, y) =
            stroke 0.5pt Color.black
              (Gr.rectangle (0pt, 0pt) (fs 0.5, fs 0.5 ))
              |> shift-graphics (x, y +' fs 0.15)
          in
          let gr-mark-done (x, y) =
            stroke 0.5pt Color.black (
              Gr.poly-line (fs (0.0 -. 0.1), fs 0.45)
                [(fs 0.15, fs 0.15); (fs 0.75, fs 0.85)])
                |> shift-graphics (x, y +' fs 0.15)
          in
          let gr point =
            if is-checked then
              [gr-square point; gr-mark-done point]
            else
              [gr-square point]
          in
          inline-skip 10pt ++ (inline-graphics fsize fsize 0pt gr)
      ```);

      +p{
        今までに紹介された `+listing` を用いても，
        上のように「3番目のみチェックが付いたリスト」を実現することはできます．
        以下のようにパターンマッチなどを用いて，
        チェックを付けたい場所のみ場合分けして処理すればよいのです．
      }

      +code(```
      +listing?:(fun idxlst ctx -> (
        let is-checked = match idxlst with
          | [3] -> true
          | _ -> false
        in
        square-label is-checked ctx
      )){
        * ミルクを買う．
        * The \SATySFi;book を読む．
        * \SATySFi; を完全に理解する．
        * 課題を解く．
      }
      ```);

      +p{
        しかしこれは今回の用途を考えるとあまり直観的ではなく，
        また編集もしやすいとはいえません．
        「ミルクを買う」にチェックを付けたいときに
        本文から離れた場所を編集しなければならないのは手間ですし，
        「どこにチェックが付いているのか」をひと目で判断することができません．
        また今回は項目数が4つでしたが，もっと長いリストでいちいち上からインデックスを数えるのは手間です．
        ラベル指定用の関数は，このように例外的にまたは動的にレイアウトを変更する用途にはあまり適していません．
      }

      +p{
        本パッケージではこのようなケースに対応するため，
        本文中でパラメータに値をセットし，その値をラベルに反映させる方法を提供しています．
        たとえば先程の To-Do リストは，
        プリアンブルにて以下のように定義された `+todo-list` 及び `\done` コマンドで作成できます．
      }

      +code(```
      let done = EnumitemBase.make-param false
      let-inline \done = {\set-item(done)(true);}
      let-block +todo-list item = '<
        +xgenlisting
          (fun idx ctx -> square-label (Param.get done) ctx)
            (default-item)(item);
      >
      ```);

      +p{
        この `+todo-list` 及び `\done` コマンドを使うと，
        先程の箇条書きは以下のようにシンプルに書くことができます．
      }

      +example(```
        +todo-list{
          * ミルクを買う．
          * The \SATySFi;book を読む．
          * \done; \SATySFi; を完全に理解する．
          * 課題を解く．
        }
      ```)<%
        +todo-list{
          * ミルクを買う．
          * The \SATySFi;book を読む．
          * \done; \SATySFi; を完全に理解する．
          * 課題を解く．
        }
      >%

      +p{
        このように，本文に `\done;` というコマンドが付いているアイテムに限り
        チェックマークが付くようになります．
        `\done` の位置は，3番目のアイテムの本文中であればどこにあってもかまいません．
      }

      +p{
        何が起きたのか，もうすこし詳細に説明します．
        ポイントは以下の4点です．
      }

      +listing{
        * `EnumitemBase` というモジュールの `make-param` 関数を用いて，
          箇条書きのアイテム内で一時的な値を保持するための器（ローカルパラメータ）を定義することができる．
        * ローカルパラメータには，本文中で `\set-item(param)(value);` と打つことで一時的に値を設定することができる．
        * `+xgenlisting` を使うと，第1引数でラベルの体裁を指定する際に，
          `Param.get` 関数でパラメータの値を受け取り，その値に応じてラベルの出力を変更することができる．
        * `\set-item` で変更した値はその項目が終わると破棄され，デフォルト値にもどる．
      }

      +p{
        先程の例の最初にある `EnumitemBase.make-param` という関数で，
        `done` という名前のローカルパラメータを生成しています．
        このローカルパラメータは前節で説明したグローバルパラメータとは少し異なり，
        箇条書きの項目の内部でパラメータを変更しても，その項目が終わったときに設定が破棄されます．
        したがって3番目の項目に限って `\done` コマンドをつけた場合，
        3番目のラベルにはチェックマークが付きますが， 4番目には付きません．
      }

      +p{
        今回定義した `done` は bool 型を保持する比較的単純なローカルパラメータでしたが，
        それ以外にも `int` 型や `inline-text` 型など，
        様々な型を持つパラメータを作成することができます．
        % `int list -> context -> inline-boxes` のような型も入れることができるため，
        工夫次第では，パラメータの値に応じてラベルのインデックスを変更したり，
        ラベルの体裁そのものを変えたり，と多彩なカスタマイズが可能となります．
      }

    >%
    +subsection{`+xgenlisting` の注意点}<%

      +p{
        `+xgenlisting` は便利なコマンドですが， `+genlisting` にはない欠点が存在します
        \footnote{この欠点のため， `+genlisting` を `+xgenlisting` で置き換えることができませんでした．}．
        それは「本文に副作用のあるコマンドを入れると不具合が起きやすい」 ということです．
        たとえば，内部でカウンタをインクリメントさせる `\footnote` を `+xgenlisting` の本文で用いると，
        （実装にもよるとは思いますが）脚注の数字が2つインクリメントされてしまう可能性があります．
      }
      +p{
        理由は実装上の事情にあります．
        実は，「本文中にあるコマンドを読み取り，その値に応じてラベルを更新する」
        という組み方は少し不自然なのです．
        なぜなら本来，ラベルを組み終わってはじめて後続する本文のテキスト幅が分かり，
        本文を組むことができるようになるからです．
        ラベルを組まないと本文が組めない，
        しかし本文を読まないとラベルを更新できない，というのが実装の困難な点でした．
      }
      +p{
        そこで， `+xgenlisting` では
        「ラベルを組む前に `read-inline` で本文を読み，読み終わったものは一度破棄する」
        という方式で実装を行いました．
        本文中のコマンドは `read-inline` で読まれることにより評価され，
        `\set-item` がある場合はそのタイミングで対象のローカルパラメータが一時的な値へとセットされます．
        その後であればラベルを組むことができ，
        ラベルさえ組めれば再度改めて本文を組むことができます．
      }

      +p{
        このとき，本文は `read-inline` によって2度評価されます．
        副作用のないコマンドであれば何度評価されても結果は変わりませんから問題ありませんが，
        副作用のあるコマンド，特に2度だけ呼ばれることを想定していないコマンドを
        `+xgenlisting` の本文のインラインテキスト中に入れると，このことによって挙動がおかしくなるのです．
      }

    >%
  >%

  +section?:(`sse:description`){定義リストの作成}<%
    +p{
      \LaTeX; や HTML において標準で用意されている箇条書きは3種類ありました．
      順序なしリスト（番号のない箇条書き），順序リスト（番号付き箇条書き），
      そして定義リストです．
    }

    +description{
      * 順序なしリスト

        ** 順序を表すインデックスのない箇条書きです．
           通常，\LaTeX; では itemize 環境，
           HTML では `<ul>` タグにより組まれます．

      * 順序リスト

        ** 順序を表すインデックスのある箇条書きです．
           通常，\LaTeX; では enumerate 環境，
           HTML では `<ol>` タグにより組まれます．

      * 定義リスト

        ** 各インデックス毎に固有の単語が付与されている箇条書きです．
           通常，\LaTeX; では description 環境，
           HTML では `<dl>` タグにより組まれます．
        ** この説明で用いられているリストは定義リストです．

    }

    +p{
      1 番目及び 2 番目のリストは
      \SATySFi; 標準の itemize パッケージでも実現することが出来ますし，
      本パッケージでも実現できることは今までに述べたとおりです．
      それに対し，3番目の定義リストを実現する手段は標準の itemize パッケージでは用意されていませんでした．
    }

    +p{
      本パッケージでは，定義リストを実現する `+gendescription` コマンドを用意しています．
      このコマンドを用いれば汎用性の高い定義リストを記述することができます．
      具体例を以下に示します．
    }

    +example(```
    +gendescription(|
      nextline = false;
      title-inner-gap = 10pt;
      inner-indent = (fun title-wid -> title-wid);
      title-func =
        (fun ctx title -> read-inline ctx {\textbf{#title;}} );
    |){
      * 英語のパングラム
        ** The quick brown fox jumps over the lazy dog.

      * 日本語のパングラム
        ** いろはにほへとちりぬるを
           わかよたれそつねならむ
           うゐのおくやまけふこえて
           あさきゆめみしゑひもせすん
        ** いろはにほへとちりぬるを
           わかよたれそつねならむ
           うゐのおくやまけふこえて
           あさきゆめみしゑひもせすん
    }
    ```)<%
      +gendescription(|
        nextline = false;
        title-inner-gap = 10pt;
        inner-indent = (fun title-wid -> title-wid);
        title-func = (fun ctx title -> read-inline ctx {\emph{#title;}});
      |){
        * 英語のパングラム
          ** The quick brown fox jumps over the lazy dog.

        * 日本語のパングラム
          ** いろはにほへとちりぬるを
             わかよたれそつねならむ
             うゐのおくやまけふこえて
             あさきゆめみしゑひもせすん
          ** いろはにほへとちりぬるを
             わかよたれそつねならむ
             うゐのおくやまけふこえて
             あさきゆめみしゑひもせすん
      }
    >%

    +p{
      具体例を見れば分かる通り，
      `+genlisting` などのコマンドとはかなりインターフェースが異なります．
      `+gendescription` は2つの引数 `record` と `inner` をとります．
      `record` は description コマンドの体裁を設定するレコードであり，
      `inner` は表示したい内容を並べる `itemize` 型の引数です．
    }

    +p{
      \SATySFi; には現在，\LaTeX; の `\item[label]` のように
      箇条書きの item 毎にラベルを変更するための記法がありません．
      そこで， `+gendescription` コマンドでは
      `inner` 部分を以下のように定めることで，
      \SATySFi; の箇条書き構文のインターフェースに沿った定義リストを実現しました
      \footnote{
        説明を読むよりも前述の具体例を見たほうが使用法が掴みやすいでしょう．
      }．
    }

    +listing{
      * 1番目の深さの item （ `*` が1つ並んでいるところ）に，
        定義リストの各 item に相当する見出しを書く．

      * 各見出しの子に相当する item （ `*` が2つ並んでいるところ）に，
        定義リストの本文を書く．
        複数の子 item を同じ親の下に並べて書くことで，複数の段落を記述することができる．
    }

    +p{
      また，`+gendescription` コマンドでは第1引数でレコードを渡すことにより，
      柔軟に定義リストを構成することができます．
      レコードの値は4種類あり，
      これらは全てオプションではなく必須引数です．
    }

    +parameters{
      * nextline
        ** (`bool`)
        ** 各 item のタイトルと本文の間に改行を挟むかどうか．
           true ならば改行を行う． false ならば改行を行わない．

      * title-inner-gap
        ** (`length`)
        ** 各 item のタイトルと本文の間に挿入する最小の空白幅．
           どちらかというと「各 item のタイトルの右に常においておく余白」
           というイメージが近い．

      * inner-indent
        ** (`length -> length`)
        ** 「タイトルの幅を引数として，本文インデント量を返す関数」を指定する．
           わざわざ関数を指定するようにしているのは，
           タイトル幅に応じてインデントを動的に変えられるようにするため．
           たとえば `(fun _ -> 10pt)` を指定すれば，
           本文ではタイトルの幅の長さに関わらず常に 10pt のインデントが行われる
           （ただし，タイトルが記述されている行を除く）．
           また，`(fun title-wid -> title-wid)` を指定すれば，
           タイトル幅（title-inner-gap を含む）と同じだけのインデントが行われる．

      * title-func
        ** (`context -> inline-text -> inline-boxes`)
        ** 「テキスト処理文脈及びタイトルのインラインテキストを引数として，
           タイトルのインラインボックス列を返す関数」を指定する．
           最も簡単なのは `read-inline` 関数をそのまま指定すること．
           この関数内部で `\textbf` のコマンドを挟んだり，
           テキスト処理文脈をいじってフォントを変更したりすることで，
           各項目のタイトルだけを太字にする，といった処理が可能になる．
    }

    +p{
      なお，本パッケージには必要なレコード引数が事前に埋められた
      `+description` コマンドも用意されています．
    }
    +code(```
      let desc-config = (|
        nextline = true;
        title-inner-gap = 5pt;
        inner-indent = (fun title-wid -> 20pt);
        title-func = read-inline;
      |)

      let-block +description item = '<
        +gendescription(desc-config)(item);
      >
    ```);
    
  >%

>%
