% -*- coding: utf-8 -*-
@require: gr
@require: color
@require: list
@require: option
@import: param

type labelfmt = int list -> context -> inline-boxes
type itemfmt = context -> int -> inline-boxes -> inline-text -> block-boxes
% type textfmt = int -> context -> context

module EnumitemBase : sig

  % genlisting command
  % +genlisting(labelf)(itemf){* items}
  % +xgenlisting(labelf)(itemf){* items}
  % labelf: labelfmt (int -> int -> context -> inline-boxes)
  %     int list: index of item (1-based indexing)
  %               [idx of last nest; ...; idx of 2nd nest; idx of 1st nest]
  %     context: *parent* context
  %     inline-boxes: inline boxes of labelfmt
  % itemf : itemfmt (context -> int -> inline-boxes -> inline-boxes -> inline-boxes)
  %     context: parent context
  %     int: depth (0-based indexing)
  %     inline-boxes: inline boxes of labelfmt
  %     inline-boxes: inline boxes of parent text
  direct +genlisting : [labelfmt; itemfmt; itemize] block-cmd
  direct +xgenlisting : [labelfmt; itemfmt; itemize] block-cmd

  direct \listing-from-block : [block-text] inline-cmd

  % gendescription command
  direct +gendescription : ['a; itemize] block-cmd
    constraint 'a :: (|
      % 各アイテムのタイトルと本体の間に改行を挟むか否か．
      nextline : bool;
      % タイトルと本体の間に挿入する空白の幅．
      title-inner-gap : length;
      % 本文のインデント量．タイトルの幅に応じて動的に変えられるようにするため，
      % 「タイトルの幅 (title-inner-gap 込) を引数として，インデント量を返す関数」
      % を指定する．
      inner-indent : length -> length;
      % タイトルを組むのに用いられる関数．
      % タイトルを太字で組むなどの用途に対応するため．
      % 最も単純なのは `read-inline` をそのまま指定すること．
      title-func : context -> inline-text -> inline-boxes;
    |)
  %
  % direct \gendescription : ['a; itemize] inline-cmd
  %   constraint 'a :: (|
  %     nextline : bool;
  %     title-inner-gap : length;
  %     inner-indent : length -> length;
  %     title-func : context -> inline-text -> inline-boxes;
  %   |)

  % item-local parameters
  val make-param : 'a -> 'a Param.t
  direct \set-item : ['a Param.t; 'a] inline-cmd

end = struct

  % useful functions
  let (+++>) = List.fold-left (+++)
  let concat-blocks = (+++>) block-nil
  let len-max l1 l2 = if l1 >' l2 then l1 else l2

  % parameters

  % read-inline を経由することにより，
  % Param.discard によるvalue のリセットを強制的に遅延評価っぽくしている．
  let-inline ctx \reset-param param = let () = Param.discard param in inline-nil

  let-inline ctx \set-item param value = let () = param |> Param.set value in inline-nil

  % この param-lst に格納されている inline-text を read-inline するとパラメータがリセットされる．
  let param-lst = Param.make []

  % make-param は itemize 内で使えるパラメータを作成し，
  % param-lst にリセット用のコマンドを登録する関数
  let make-param init-value =
    let param = Param.make init-value in
    let () = param-lst |> Param.set ({\reset-param(param);} :: Param.get param-lst) in
    param

  % general listing function

  % labelf, itemf, depth, index, context, item が与えられた状態で再帰的に箇条書きを組む．
  let-rec genitem labelf itemf depth idxlst ctx (Item(parent, children)) =

    % フラグ周りは使わないのでリセット
    let _ = List.map (read-inline ctx) (Param.get param-lst) in

    % 親のラベルと本文を合わせた block-boxes を作成
    let ib-label = labelf idxlst ctx in
    let bb-parent = itemf ctx depth ib-label parent in

    % 子の block-boxes を作成
    let bblst-children = List.mapi (
      fun i -> genitem labelf itemf (depth + 1) ((i + 1) :: idxlst) ctx
    ) children in

    bb-parent +++> bblst-children

  % labelf, itemf, depth, index, context, item が与えられた状態で再帰的に箇条書きを組む．
  % item 内で変更された parameter の値を用いることができる．
  let-rec genitem-extended labelf itemf depth idxlst ctx (Item(parent, children)) =

    % ここで先に parent の内容を read-inline しておく．
    % そうすることで， parent の it の中のコマンドを評価し，
    % 副作用がある場合は予め走らせておく！
    let _ = read-inline ctx parent in

    % 親のラベルと本文を合わせた block-boxes を作成
    let ib-label = labelf idxlst ctx in
    let bb-parent = itemf ctx depth ib-label parent in

    % 起きてしまった副作用のリセット
    let _ = List.map (read-inline ctx) (Param.get param-lst) in

    % 子の block-boxes を作成
    let bblst-children = List.mapi (
      fun i -> genitem-extended labelf itemf (depth + 1) ((i + 1) :: idxlst) ctx
    ) children in

    bb-parent +++> bblst-children

  % general listing command

  let-inline ctx \listing-from-block block-listing =
    let ib-block = embed-block-breakable ctx (read-block ctx '<#block-listing;>) in
    inline-fil ++ ib-block ++ omit-skip-after

  let-block ctx +genlisting labelf itemf lsting =
    let (Item(_, itmzlst)) = lsting in
    let bblst = List.mapi (fun i -> genitem labelf itemf 0 [i + 1] ctx) itmzlst in
      (concat-blocks bblst)

  let-block ctx +xgenlisting labelf itemf lsting =
    let (Item(_, itmzlst)) = lsting in
    let bblst = List.mapi (fun i -> genitem-extended labelf itemf 0 [i + 1] ctx) itmzlst in
      (concat-blocks bblst)

  % description command

  let desc-style-nextline record ctx title innerlst =
    % margin に関する数値
    let fsize = get-font-size ctx in
    let gap-inner-item = fsize *' 0.5 in  % 標準の行送りと揃える
    let gap-between-item = fsize *' 0.7 in

    let ib-title = record#title-func ctx title in
    let bb-title =
      let ctx-adjmgn = ctx |> set-paragraph-margin gap-between-item gap-inner-item in
      line-break true false ctx-adjmgn ib-title
    in

    let bb-inner-func ctx =
      concat-blocks (
        List.map (fun it -> line-break true true ctx ((read-inline ctx it) ++ inline-fil))
          innerlst
      )
    in

    let box-inner =
      let title-wid = get-natural-width ib-title +' record#title-inner-gap in
      let indent = record#inner-indent title-wid in
      let box-width = (get-text-width ctx) -' indent in
      let ctx-inner = ctx |> set-paragraph-margin gap-inner-item gap-inner-item in
      let ib-inner = embed-block-top ctx-inner box-width bb-inner-func in
      let ctx-adjmgn = ctx |> set-paragraph-margin gap-inner-item gap-between-item in
      line-break false true ctx-adjmgn (inline-skip indent ++ ib-inner)
    in

    bb-title +++ box-inner

  let desc-style-nonextline record ctx title innerlst =
    % margin に関する数値
    let fsize = get-font-size ctx in
    let gap-inner-item = fsize *' 0.7 in  % 標準の行送りと揃える
    let gap-between-item = fsize *' 1.0 in
    let ctx-adjmgn = ctx |> set-paragraph-margin gap-between-item gap-between-item in

    % 「インデント幅」 の width を持つ inline-boxes として ib-title を作成
    let ib-title = record#title-func ctx title in
    let (wid-title, ht-title, dp-title) = get-natural-metrics ib-title in
    let inner-indent = record#inner-indent (wid-title +' record#title-inner-gap) in
    let ib-title-box =
      inline-graphics inner-indent ht-title dp-title
        (fun (x, y) -> [draw-text (x, y) ib-title])
    in

    let bb-inner-func ctx =
      let first-indent idx =
        if idx == 0 then
          len-max (wid-title -' inner-indent +' record#title-inner-gap) 0pt
        else 0pt
      in
      concat-blocks (
        List.mapi (
          fun idx it ->
            line-break true true ctx
              ((inline-skip (first-indent idx)) ++ (read-inline ctx it) ++ inline-fil)
        )
          innerlst
      )
    in

    let box-width = (get-text-width ctx) -' inner-indent in
    let ctx-inner = ctx |> set-paragraph-margin gap-inner-item gap-inner-item in
    let ib-inner = embed-block-top ctx-inner box-width bb-inner-func in
    let ctx-adjmgn = ctx |> set-paragraph-margin gap-inner-item gap-between-item in

    line-break true true ctx-adjmgn (ib-title-box ++ ib-inner)

  let desc-item record ctx (Item(title, itmzlst)) =
    let innerlst = List.map (fun (Item(text, _)) -> text) itmzlst in
    if record#nextline then
      desc-style-nextline record ctx title innerlst
    else
      % not implemented
      desc-style-nonextline record ctx title innerlst

  let description record ctx (Item(_, itmzlst)) =
    let bblst = List.map (desc-item record ctx) itmzlst in
      (concat-blocks bblst)

  let-block ctx +gendescription record item = description record ctx item

  let-block +description item = '<
    +gendescription(|
      nextline = true;
      title-inner-gap = 5pt;
      inner-indent = (fun title-wid -> 20pt);
      title-func = read-inline;
    |)(item);
  >

  let-inline \gendescription record item = {\listing-from-block<+gendescription(record)(item);>}
  let-inline \description item = {\listing-from-block<+description(item);>}

end

% decolation functions
module Enumitem : sig

  % text mapping function
  val to-arabic: int -> inline-text
  val to-roman : int -> inline-text
  val to-Roman : int -> inline-text
  val to-alph  : int -> inline-text
  val to-Alph  : int -> inline-text

  % index decolation function (ordered)
  val raw     : (int -> inline-text) -> int list -> context -> inline-boxes
  val dot     : (int -> inline-text) -> int list -> context -> inline-boxes
  val paren   : (int -> inline-text) -> int list -> context -> inline-boxes
  val bracket : (int -> inline-text) -> int list -> context -> inline-boxes

  % index decolation function (unordered)
  val shape-bullet       : context -> inline-boxes
  val shape-white-bullet : context -> inline-boxes

  % labelfmt function
  % ordered
  val raw-arabic     : int list -> context -> inline-boxes
  val raw-roman      : int list -> context -> inline-boxes
  val raw-Roman      : int list -> context -> inline-boxes
  val raw-alph       : int list -> context -> inline-boxes
  val raw-Alph       : int list -> context -> inline-boxes
  val dot-arabic     : int list -> context -> inline-boxes
  val dot-roman      : int list -> context -> inline-boxes
  val dot-Roman      : int list -> context -> inline-boxes
  val dot-alph       : int list -> context -> inline-boxes
  val dot-Alph       : int list -> context -> inline-boxes
  val paren-arabic   : int list -> context -> inline-boxes
  val paren-roman    : int list -> context -> inline-boxes
  val paren-Roman    : int list -> context -> inline-boxes
  val paren-alph     : int list -> context -> inline-boxes
  val paren-Alph     : int list -> context -> inline-boxes
  val bracket-arabic : int list -> context -> inline-boxes
  val bracket-roman  : int list -> context -> inline-boxes
  val bracket-Roman  : int list -> context -> inline-boxes
  val bracket-alph   : int list -> context -> inline-boxes
  val bracket-Alph   : int list -> context -> inline-boxes

  % unordered
  val bullet         : int list -> context -> inline-boxes
  val white-bullet   : int list -> context -> inline-boxes

  % labelfmt transform
  val change-by-depth : labelfmt list -> labelfmt

  % item constructor
  val default-item : context -> int -> inline-boxes -> inline-text -> block-boxes

  % default commands
  direct +listing    : [labelfmt?; itemize] block-cmd
  direct +enumerate  : [labelfmt?; itemize] block-cmd
  direct +description: [itemize] block-cmd
  direct \listing    : [labelfmt?; itemize] inline-cmd
  direct \enumerate  : [labelfmt?; itemize] inline-cmd
  direct \description: [itemize] inline-cmd

end = struct

  % text mapping

  let num-to-roman-char capital num =
    let unic-point = match num with
      |  1 -> 0x0049  % `I`
      |  5 -> 0x0056  % `V`
      | 10 -> 0x0058  % `X`
      |  _ -> 0x003F  % `?`
    in
    if capital then unic-point else unic-point + 0x20

  let roman-seq num = match num with
    |  1 -> [ 1;                 ] % i
    |  2 -> [ 1;  1;             ] % ii
    |  3 -> [ 1;  1;  1;         ] % iii
    |  4 -> [ 1;  5;             ] % iv
    |  5 -> [ 5;                 ] % v
    |  6 -> [ 5;  1;             ] % vi
    |  7 -> [ 5;  1;  1;         ] % vii
    |  8 -> [ 5;  1;  1;  1;     ] % viii
    |  9 -> [ 1; 10;             ] % ix
    | 10 -> [10;                 ] % x
    | 11 -> [10;  1;             ] % xi
    | 12 -> [10;  1;  1;         ] % xii
    | 13 -> [10;  1;  1;  1;     ] % xiii
    | 14 -> [10;  1;  5;         ] % xiv
    | 15 -> [10;  5;             ] % xv
    | 16 -> [10;  5;  1;         ] % xvi
    | 17 -> [10;  5;  1;  1;     ] % xvii
    | 18 -> [10;  5;  1;  1;  1; ] % xviii
    | 19 -> [10;  1; 10;         ] % xix
    | 20 -> [10; 10;             ] % xx
    | 21 -> [10; 10;  1;         ] % xxi
    | 22 -> [10; 10;  1;  1;     ] % xxii
    | 23 -> [10; 10;  1;  1;  1; ] % xxiii
    | 24 -> [10; 10;  1;  5;     ] % xxiv
    | 25 -> [10; 10;  5;         ] % xxv
    |  _ -> [ 0;  0;             ] % ??

  let to-arabic num = embed-string (arabic num)

  let to-roman num =
    embed-string
      (string-unexplode
        (List.map (fun i -> num-to-roman-char false i) (roman-seq num)))
  let to-Roman num =
    embed-string
      (string-unexplode
        (List.map (fun i -> num-to-roman-char true i) (roman-seq num)))

  let to-alph num = embed-string (string-unexplode [num + 0x0060;])
  let to-Alph num = embed-string (string-unexplode [num + 0x0040;])

  % index decolation

  let label-width-ratio = 2.0  % ラベル幅: item-indent からラベル幅だけシフトした場所から本文が始まる

  let raw num-format idxlst ctx =
    let label-width = (get-font-size ctx) *' label-width-ratio in
    let idx = idxlst |> List.nth 0 |> Option.from 1 in
    let it-num = num-format idx in
    let ib-label = read-inline ctx {#it-num;\ } in
    let (wid-label, _, _) = get-natural-metrics ib-label in
    inline-skip (label-width -' wid-label) ++ ib-label

  let dot num-format idxlst ctx =
    let label-width = (get-font-size ctx) *' label-width-ratio in
    let idx = idxlst |> List.nth 0 |> Option.from 1 in
    let it-num = num-format idx in
    let ib-label = read-inline ctx {#it-num;.\ } in
    let (wid-label, _, _) = get-natural-metrics ib-label in
    inline-skip (label-width -' wid-label) ++ ib-label

  let paren num-format idxlst ctx =
    let label-width = (get-font-size ctx) *' label-width-ratio in
    let idx = idxlst |> List.nth 0 |> Option.from 1 in
    let it-num = num-format idx in
    let ib-label = read-inline ctx {(#it-num;)\ } in
    let (wid-label, _, _) = get-natural-metrics ib-label in
    inline-skip (label-width -' wid-label) ++ ib-label

  let bracket num-format idxlst ctx =
    let label-width = (get-font-size ctx) *' label-width-ratio in
    let idx = idxlst |> List.nth 0 |> Option.from 1 in
    let it-num = num-format idx in
    let ib-label = read-inline ctx {[#it-num;]\ } in
    let (wid-label, _, _) = get-natural-metrics ib-label in
    inline-skip (label-width -' wid-label) ++ ib-label


  let shape-bullet ctx =
    let font-size = get-font-size ctx in
    let label-width = font-size *' label-width-ratio in
    let interval = font-size *' 0.3 in
    let circ ctx (x, y) =
      let cx = x +' label-width -' (font-size *' 0.3) -' interval in
      let cy = y +' font-size *' 0.3 in
      let r = font-size *' 0.15 in
      Gr.circle (cx, cy) r
    in
    inline-graphics label-width 8pt 0pt
      (fun (x, y) -> [fill Color.black (circ ctx (x, y))])

  let shape-white-bullet ctx =
    let font-size = get-font-size ctx in
    let label-width = font-size *' label-width-ratio in
    let interval = font-size *' 0.3 in
    let circ ctx (x, y) =
      let cx = x +' label-width -' (font-size *' 0.3) -' interval in
      let cy = y +' font-size *' 0.3 in
      let r = font-size *' 0.12 in
      Gr.circle (cx, cy) r
    in
    inline-graphics label-width 8pt 0pt
      (fun (x, y) -> [stroke 1pt Color.black (circ ctx (x, y))])

  % labels

  let raw-arabic = raw to-arabic
  let raw-roman  = raw to-roman
  let raw-Roman  = raw to-Roman
  let raw-alph   = raw to-alph
  let raw-Alph   = raw to-Alph

  let dot-arabic = dot to-arabic
  let dot-roman  = dot to-roman
  let dot-Roman  = dot to-Roman
  let dot-alph   = dot to-alph
  let dot-Alph   = dot to-Alph

  let paren-arabic = paren to-arabic
  let paren-roman  = paren to-roman
  let paren-Roman  = paren to-Roman
  let paren-alph   = paren to-alph
  let paren-Alph   = paren to-Alph

  let bracket-arabic = bracket to-arabic
  let bracket-roman  = bracket to-roman
  let bracket-Roman  = bracket to-Roman
  let bracket-alph   = bracket to-alph
  let bracket-Alph   = bracket to-Alph

  let bullet _ = shape-bullet
  let white-bullet _ = shape-white-bullet


  % ひとまずモジュール共通の Param としておく．
  % ゆくゆくはコマンド引数にレコードの形で指定させるようにするかも
  let item-indent-ratio = Param.make 1.5

  let change-by-depth labelflst idxlst ctx =
    let dpt = List.length idxlst - 1 in
    let labelf-len = List.length labelflst in
    if dpt > labelf-len then
      bullet idxlst ctx
    else
      let labelf = labelflst |> List.nth dpt |> Option.from bullet in
      labelf idxlst ctx

  % 現在の context, 階層の深さ，ラベル，本文を指定して箇条書きの1つのアイテムを組み上げる．
  let default-item ctx depth ib-label parent =
    let parent-indent =
      let fsize = get-font-size ctx in
      fsize *' ((Param.get item-indent-ratio) *. (float depth))
    in
    let ib-parent-text =
      let index-width = get-natural-width ib-label in
      let item-text-width = ((get-text-width ctx) -' parent-indent -' index-width) in
      embed-block-top ctx item-text-width (fun ctx ->
        line-break true true ctx (read-inline ctx parent ++ inline-fil)
      )
    in
    line-break true true ctx
      ((inline-skip parent-indent) ++ ib-label ++ ib-parent-text)


  let-block ctx +listing ?:labelf item =
    let labelf = Option.from bullet labelf in
    read-block ctx '<+genlisting(labelf)(default-item)(item);>

  let default-enum-rule idxlst =
    match (List.length idxlst) with
    | 1 -> dot to-arabic idxlst
    | 2 -> paren to-alph idxlst
    | 3 -> paren to-roman idxlst
    | _ -> dot to-arabic idxlst

  let-block ctx +enumerate ?:labelf item =
    let labelf = Option.from default-enum-rule labelf in
    read-block ctx '< +genlisting(labelf)(default-item)(item); >

  let-block +description item = '<
    +gendescription(|
      nextline = true;
      title-inner-gap = 5pt;
      inner-indent = (fun title-wid -> 20pt);
      title-func = read-inline;
    |)(item);
  >

  let-inline ctx \listing ?:labelf item =
    match labelf with
    | Some(labelf) -> read-inline ctx {\listing-from-block<+listing?:(labelf)(item);>}
    | None         -> read-inline ctx {\listing-from-block<+listing(item);>}

  let-inline ctx \enumerate ?:labelf item =
    match labelf with
    | Some(labelf) -> read-inline ctx {\listing-from-block<+enumerate?:(labelf)(item);>}
    | None         -> read-inline ctx {\listing-from-block<+enumerate(item);>}

  let-inline \description item = {\listing-from-block<+description(item);>}

end
