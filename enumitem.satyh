% -*- coding: utf-8 -*-
% vim:foldmethod=marker:
@require: gr
@require: color
@import: param

module Enumitem : sig

  % genlisting command
  % +genlisting(idxf)(textf){* items}
  % idxf: int -> int -> context -> inline-boxes
  %     int: depth
  %     int: index
  %     context: *parent* context
  %     inline-boxes: inline boxes of label
  % textf: int -> context -> context
  %     int: depth
  %     context: *parent* context
  %     context: context of text (and child)
  direct +genlisting : [(int -> int -> context -> inline-boxes);
                        (int -> context -> context); itemize] block-cmd
  % direct +xgenlisting : [(int -> int -> context -> inline-boxes);
  %                        (int -> context -> context); itemize] block-cmd
  % direct \genlisting : [(int -> int -> context -> inline-boxes);
  %                       (int -> context -> context); itemize] block-cmd
  % direct \xgenlisting : [(int -> int -> context -> inline-boxes);
  %                        (int -> context -> context); itemize] block-cmd
  %
  % direct \listing-from-block : [block-text] inline-cmd

  % gendescription command
  % direct +gendescription : ['a; itemize] block-cmd
  %   constraint 'a :: (|
  %     % 各アイテムのタイトルと本体の間に改行を挟むか否か．
  %     nextline : bool;
  %     % タイトルと本体の間に挿入する空白の幅．
  %     title-inner-gap : length;
  %     % 本文のインデント量．タイトルの幅に応じて動的に変えられるようにするため，
  %     % 「タイトルの幅 (title-inner-gap 込) を引数として，インデント量を返す関数」
  %     % を指定する．
  %     inner-indent : length -> length;
  %     % タイトルを組むのに用いられる関数．
  %     % タイトルを太字で組むなどの用途に対応するため．
  %     % 最も単純なのは `read-inline` をそのまま指定すること．
  %     title-func : context -> inline-text -> inline-boxes;
  %   |)
  %
  % direct \gendescription : ['a; itemize] inline-cmd
  %   constraint 'a :: (|
  %     nextline : bool;
  %     title-inner-gap : length;
  %     inner-indent : length -> length;
  %     title-func : context -> inline-text -> inline-boxes;
  %   |)
  %
  % direct +description : [itemize] block-cmd
  % direct \description : [itemize] inline-cmd

  % % text mapping command
  % val to-arabic: int -> inline-text
  % val to-roman : int -> inline-text
  % val to-Roman : int -> inline-text
  % val to-alph  : int -> inline-text
  % val to-Alph  : int -> inline-text
  %
  % % index decolation command (ordered)
  % val label-raw     : (int -> inline-text) -> int -> context -> inline-boxes
  % val label-dot     : (int -> inline-text) -> int -> context -> inline-boxes
  % val label-paren   : (int -> inline-text) -> int -> context -> inline-boxes
  % val label-bracket : (int -> inline-text) -> int -> context -> inline-boxes
  %
  % % index decolation command (unordered)
  % val label-bullet       : context -> inline-boxes
  % val label-white-bullet : context -> inline-boxes

  % item-local parameters
  val make-item-local-param : 'a -> 'a Param.t
  direct \set-item : ['a Param.t; 'a] inline-cmd

end = struct

  % useful functions {{{
  let (+++>) = List.fold-left (+++)
  let concat-blocks = (+++>) block-nil
  let len-max l1 l2 = if l1 >' l2 then l1 else l2

  % }}}

  % parameters {{{

  % ひとまずモジュール共通の Param としておく．
  % ゆくゆくはコマンド引数にレコードの形で指定させるようにするかも
  let item-indent-ratio = Param.make 1.5

  % read-inline を経由することにより，
  % item-flag による flag の値の取得を強制的に遅延評価っぽくしている．
  let-inline ctx \reset-param param = let () = Param.discard param in inline-nil
  let-inline ctx \set-item param value = let () = param |> Param.set value in inline-nil

  % この param-lst に格納されている inline-text を
  % read-inline するとパラメータがリセットされる
  let param-lst = Param.make []

  % make-param は itemize 内で使えるパラメータを作成し，
  % param-lst にリセット用のパラメータを登録する関数
  let make-item-local-param init-value =
    let param = Param.make init-value in
    let () = param-lst |> Param.set ({\reset-param(param);} :: Param.get param-lst) in
    param

  % }}}

  % general listing function {{{
  let calc-parent-indent ctx depth =
    let fsize = get-font-size ctx in
    fsize *' ((Param.get item-indent-ratio) *. (float depth))

  let-rec genitem idxf textf depth idx ctx (Item(parent, children)) =
    % フラグ周りのリセット
    let _ = List.map (read-inline ctx) (Param.get param-lst) in

    % 親の context を評価
    let ctx-parent = textf depth ctx in

    % 親の block-boxes を作成
    let bb-parent =
      let ib-idx = idxf depth idx ctx in
      let parent-indent = calc-parent-indent ctx depth in
      let ib-parent-text =
        let index-width = get-natural-width ib-idx in
        let item-text-width = ((get-text-width ctx) -' parent-indent -' index-width) in
        embed-block-top ctx-parent item-text-width (fun ctx ->
          line-break true true ctx (read-inline ctx parent ++ inline-fil)
        )
      in
      line-break true true ctx-parent
        ((inline-skip parent-indent) ++ ib-idx ++ ib-parent-text)
    in

    % 子の block-boxes を作成
    let bblst-children = List.mapi (
      fun i -> genitem idxf textf (depth + 1) (i + 1) ctx-parent
    ) children in

    bb-parent +++> bblst-children

  % }}}

  % general listing command {{{
  let-block ctx +genlisting idxf textf lsting =
    let (Item(_, itmzlst)) = lsting in
    let bblst = List.mapi (fun i -> genitem idxf textf 0 (i + 1) ctx) itmzlst in
      (concat-blocks bblst)

  % }}}

  % decolation/text mapping command {{{

  % }}}

  % description command {{{

  % }}}

end

% Aliases
