% -*- coding: utf-8 -*-
% vim:foldmethod=marker:
@require: gr
@require: color
@import: param

let-rec power-float-int r m =
  match m with
  | 0 -> 1.
  | _ -> (power-float-int r (m - 1)) *. r

let max-float f1 f2 = if (1pt *' f1) >' (1pt *' f2) then f1 else f2

module Enumitem : sig

  % genlisting command
  direct +genlisting : [(context -> int -> inline-boxes); itemize] block-cmd
  direct +xgenlisting : [(context -> int -> inline-boxes); itemize] block-cmd
  direct +genlistings : [(int -> context -> int -> inline-boxes); itemize] block-cmd
  direct +xgenlistings : [(int -> context -> int -> inline-boxes); itemize] block-cmd
  direct \listing-from-block : [block-text] inline-cmd
  direct \genlisting : [(context -> int -> inline-boxes); itemize] inline-cmd
  direct \xgenlisting : [(context -> int -> inline-boxes); itemize] inline-cmd
  direct \genlistings : [(int -> context -> int -> inline-boxes); itemize] inline-cmd
  direct \xgenlistings : [(int -> context -> int -> inline-boxes); itemize] inline-cmd

  direct +gendescription : ['a; itemize] block-cmd
    constraint 'a :: (|
      % 各アイテムのタイトルと本体の間に改行を挟むか否か．
      nextline : bool;
      % タイトルと本体の間に挿入する空白の幅．
      title-inner-gap : length;
      % 本文のインデント量．タイトルの幅に応じて動的に変えられるようにするため，
      % 「タイトルの幅 (title-inner-gap 込) を引数として，インデント量を返す関数」
      % を指定する．
      inner-indent : length -> length;
      % タイトルを組むのに用いられる関数．
      % タイトルを太字で組むなどの用途に対応するため．
      % 最も単純なのは `read-inline` をそのまま指定すること．
      title-func : context -> inline-text -> inline-boxes;
    |)
  direct \gendescription : ['a; itemize] inline-cmd
    constraint 'a :: (|
      nextline : bool;
      title-inner-gap : length;
      inner-indent : length -> length;
      title-func : context -> inline-text -> inline-boxes;
    |)

  direct +description : [itemize] block-cmd
  direct \description : [itemize] inline-cmd

  % index-specify command (ordered index)
  val label-raw     : (int -> inline-text) -> context -> int -> inline-boxes
  val label-dot     : (int -> inline-text) -> context -> int -> inline-boxes
  val label-paren   : (int -> inline-text) -> context -> int -> inline-boxes
  val label-bracket : (int -> inline-text) -> context -> int -> inline-boxes

  % index-specify command (unordered index)
  val label-bullet : context -> int -> inline-boxes
  val label-white-bullet : context -> int -> inline-boxes

  % text mapping command
  val to-arabic: int -> inline-text
  val to-roman : int -> inline-text
  val to-Roman : int -> inline-text
  val to-alph  : int -> inline-text
  val to-Alph  : int -> inline-text

  % item flag
  direct \setitem : ['a Param.t; 'a] inline-cmd
  % 指定したパラメータを extended itemize で使えるようにする．
  val make-param : 'a -> 'a Param.t

  % params
  val item-indent-ratio : float Param.t
  val item-gap-ratio : float Param.t
  val item-gap-outer-ratio : float Param.t
  val font-shrink-ratio : float Param.t
  val minimal-font-ratio : float Param.t

end = struct

  let (+++>) = List.fold-left (+++)
  let concat-blocks = (+++>) block-nil
  let len-max l1 l2 = if l1 >' l2 then l1 else l2

  let item-indent-ratio = Param.make 1.5
  let item-gap-ratio = Param.make 0.75
  let item-gap-outer-ratio = Param.make 0.3
  let font-shrink-ratio = Param.make 1.00
  let minimal-font-ratio = Param.make 1.00

  % read-inline を経由することにより，
  % item-flag による flag の値の取得を強制的に遅延評価っぽくしている．
  let-inline ctx \reset-param param = let () = Param.discard param in inline-nil
  let-inline ctx \setitem param value = let () = param |> Param.set value in inline-nil

  % この param-lst に格納されている inline-text を
  % read-inline するとパラメータがリセットされる
  let param-lst = Param.make []

  % make-param は itemize 内で使えるパラメータを作成し，
  % param-lst にリセット用のパラメータを登録する関数
  let make-param init-value =
    let param = Param.make init-value in
    let () = param-lst |> Param.set ({\reset-param(param);} :: Param.get param-lst) in
    param

  % genlisting command {{{

  let-rec general-list-item : int -> context -> (int -> context -> int -> inline-boxes) -> int -> itemize -> block-boxes
    | index ctx idxrules depth (Item(parent, children)) =
        % フォント関係の設定
        let base-font-size = get-font-size ctx in
        let shrink-ratio = max-float (power-float-int (Param.get font-shrink-ratio) depth) (Param.get minimal-font-ratio) in
        let item-font-size = base-font-size *' shrink-ratio in
        let ctx-item = ctx
          |> set-font-size item-font-size
        in

        % フラグ系は general-list-item では使えない．
        % すべてリセット
        let _ = List.map (read-inline ctx) (Param.get param-lst) in

        % index の inline box
        let ib-index = idxrules depth ctx-item index in

        % index の幅を計算
        let index-width = get-natural-width ib-index in
        let item-gap = base-font-size *' (Param.get item-gap-ratio) in
        let parent-indent = base-font-size *' ((Param.get item-indent-ratio) *. (float depth)) in

        % 本文の inline-box. embed-block-top で作る．
        % 幅は index-width のぶん狭くなる
        let item-text-width = ((get-text-width ctx-item) -' parent-indent -' index-width) in
        let ib-parent-text =
          embed-block-top ctx-item item-text-width (fun ctx ->
            line-break true true (ctx |> set-paragraph-margin item-gap item-gap)
              (read-inline ctx parent ++ inline-fil)
          )
        in
        % index と text をあわせたものが parent の block-box になる
        let bb-parent =
          line-break true true (ctx-item |> set-paragraph-margin item-gap item-gap)
            ((inline-skip parent-indent) ++ ib-index ++ ib-parent-text)
        in

        % 子の item を呼び出す
        let bblst-children = List.mapi (
          fun i -> general-list-item (i + 1) ctx-item idxrules (depth + 1)
        ) children in

        bb-parent +++> bblst-children

  let-rec general-list-item-extend : int -> context -> (int -> context -> int -> inline-boxes) -> int -> itemize -> block-boxes
    | index ctx idxrules depth (Item(parent, children)) =
        % フォント関係の設定
        let base-font-size = get-font-size ctx in
        let shrink-ratio = max-float (power-float-int (Param.get font-shrink-ratio) depth) (Param.get minimal-font-ratio) in
        let item-font-size = base-font-size *' shrink-ratio in
        let ctx-item = ctx
          |> set-font-size item-font-size
        in

        % ここで先に parent の内容を read-inline しておく．
        % そうすることで， parent の it の中のコマンドを評価し，
        % 副作用がある場合は予め走らせておく！
        let _ = read-inline ctx parent in

        % index の inline box
        let ib-index = idxrules depth ctx-item index in

        % index の幅を計算
        let index-width = get-natural-width ib-index in
        let item-gap = base-font-size *' (Param.get item-gap-ratio) in
        let parent-indent = base-font-size *' ((Param.get item-indent-ratio) *. (float depth)) in

        % 本文の inline-box. embed-block-top で作る．
        % 幅は index-width のぶん狭くなる
        let item-text-width = ((get-text-width ctx-item) -' parent-indent -' index-width) in
        let ib-parent-text =
          embed-block-top ctx-item item-text-width (fun ctx ->
            line-break true true (ctx |> set-paragraph-margin item-gap item-gap)
              (read-inline ctx parent ++ inline-fil)
          )
        in

        % item-flag-ref 及び item-it-ref について，起きてしまった副作用をリセットする．
        let _ = List.map (read-inline ctx) (Param.get param-lst) in


        % index と text をあわせたものが parent の block-box になる
        let bb-parent =
          line-break true true (ctx-item |> set-paragraph-margin item-gap item-gap)
            ((inline-skip parent-indent) ++ ib-index ++ ib-parent-text)
        in

        % 子の item を呼び出す
        let bblst-children = List.mapi (
          fun i -> general-list-item-extend (i + 1) ctx-item idxrules (depth + 1)
        ) children in

        bb-parent +++> bblst-children

  let general-list-extend ctx idxrules (Item(_, itmzlst)) =
    let base-font-size = get-font-size ctx in
    let item-gap-outer = base-font-size *' (Param.get item-gap-outer-ratio) in
    let bblst = List.mapi (fun i -> general-list-item-extend (i + 1) ctx idxrules 0) itmzlst in
      (concat-blocks bblst)

  let general-list ctx idxrules (Item(_, itmzlst)) =
    let base-font-size = get-font-size ctx in
    let item-gap-outer = base-font-size *' (Param.get item-gap-outer-ratio) in
    let bblst = List.mapi (fun i -> general-list-item (i + 1) ctx idxrules 0) itmzlst in
      (concat-blocks bblst)

  % idxrule: ctx, index (item に振る番号) をとって index の inline-boxes を返す関数．
  let-block ctx +genlisting idxrule item =
    let idxrules _ = idxrule in
    general-list ctx idxrules item

  % idxrule: ctx, index (item に振る番号) をとって index の inline-boxes を返す関数．
  let-block ctx +xgenlisting idxrule item =
    let idxrules _ = idxrule in
    general-list-extend ctx idxrules item

  % idxrules: depth (itemize のネストの深さ), ctx, index (item に振る番号) をとって
  %           index の inline-boxes を返す関数．
  let-block ctx +genlistings idxrules item =
    general-list ctx idxrules item

  % idxrules: depth (itemize のネストの深さ), ctx, index (item に振る番号) をとって
  %           index の inline-boxes を返す関数．
  let-block ctx +xgenlistings idxrules item =
    general-list-extend ctx idxrules item

  let-inline ctx \listing-from-block block-listing =
    let ib-block = embed-block-breakable ctx (read-block ctx '<#block-listing;>) in
  inline-fil ++ ib-block ++ omit-skip-after

  let-inline \genlisting idxrule item =
    {\listing-from-block<+genlisting(idxrule)(item);>} 

  let-inline \genlistings idxrules item =
    {\listing-from-block<+genlistings(idxrules)(item);>} 

  let-inline \xgenlisting idxrule item =
    {\listing-from-block<+xgenlisting(idxrule)(item);>}

  let-inline \xgenlistings idxrules item =
    {\listing-from-block<+xgenlistings(idxrules)(item);>}

  % description command

  % description style.

  let desc-style-nextline record ctx title innerlst = 
    % margin に関する数値
    let fsize = get-font-size ctx in
    let gap-inner-item = fsize *' 0.5 in  % 標準の行送りと揃える
    let gap-between-item = fsize *' 0.7 in

    let ib-title = record#title-func ctx title in
    let bb-title =
      let ctx-adjmgn = ctx |> set-paragraph-margin gap-between-item gap-inner-item in
      line-break true false ctx-adjmgn ib-title
    in

    let bb-inner-func ctx =
      concat-blocks (
        List.map (fun it -> line-break true true ctx ((read-inline ctx it) ++ inline-fil))
          innerlst
      )
    in

    let box-inner =
      let title-wid = get-natural-width ib-title +' record#title-inner-gap in
      let indent = record#inner-indent title-wid in
      let box-width = (get-text-width ctx) -' indent in
      let ctx-inner = ctx |> set-paragraph-margin gap-inner-item gap-inner-item in
      let ib-inner = embed-block-top ctx-inner box-width bb-inner-func in
      let ctx-adjmgn = ctx |> set-paragraph-margin gap-inner-item gap-between-item in
      line-break false true ctx-adjmgn (inline-skip indent ++ ib-inner)
    in

    bb-title +++ box-inner

  let desc-style-nonextline record ctx title innerlst = 
    % margin に関する数値
    let fsize = get-font-size ctx in
    let gap-inner-item = fsize *' 0.7 in  % 標準の行送りと揃える
    let gap-between-item = fsize *' 1.0 in
    let ctx-adjmgn = ctx |> set-paragraph-margin gap-between-item gap-between-item in

    % 「インデント幅」 の width を持つ inline-boxes として ib-title を作成
    let ib-title = record#title-func ctx title in
    let (wid-title, ht-title, dp-title) = get-natural-metrics ib-title in
    let inner-indent = record#inner-indent (wid-title +' record#title-inner-gap) in
    let ib-title-box =
      inline-graphics inner-indent ht-title dp-title
        (fun (x, y) -> [draw-text (x, y) ib-title])
    in

    let bb-inner-func ctx =
      let first-indent idx =
        if idx == 0 then
          len-max (wid-title -' inner-indent +' record#title-inner-gap) 0pt
        else 0pt
      in
      concat-blocks (
        List.mapi (
          fun idx it ->
            line-break true true ctx
              ((inline-skip (first-indent idx)) ++ (read-inline ctx it) ++ inline-fil)
        )
          innerlst
      )
    in

    let box-width = (get-text-width ctx) -' inner-indent in
    let ctx-inner = ctx |> set-paragraph-margin gap-inner-item gap-inner-item in
    let ib-inner = embed-block-top ctx-inner box-width bb-inner-func in
    let ctx-adjmgn = ctx |> set-paragraph-margin gap-inner-item gap-between-item in

    line-break false true ctx-adjmgn (ib-title-box ++ ib-inner)

  let desc-item record ctx (Item(title, itmzlst)) =
    let innerlst = List.map (fun (Item(text, _)) -> text) itmzlst in
    if record#nextline then
      desc-style-nextline record ctx title innerlst
    else
      % not implemented
      desc-style-nonextline record ctx title innerlst

  let description record ctx (Item(_, itmzlst)) =
    let bblst = List.map (desc-item record ctx) itmzlst in
      (concat-blocks bblst)

  let-block ctx +gendescription record item = description record ctx item

  let-block +description item = '<
    +gendescription(|
      nextline = true;
      title-inner-gap = 5pt;
      inner-indent = (fun title-wid -> 20pt);
      title-func = read-inline;
    |)(item);
  >

  let-inline \gendescription record item = {\listing-from-block<+gendescription(record)(item);>}
  let-inline \description item = {\listing-from-block<+description(item);>}

  % }}}

  % text mapping command {{{
  let num-to-roman-char capital num =
    let unic-point = match num with
      |  1 -> 0x0049  % `I`
      |  5 -> 0x0056  % `V`
      | 10 -> 0x0058  % `X`
      |  _ -> 0x003F  % `?`
    in
    if capital then unic-point else unic-point + 0x20

  let roman-seq num = match num with
    |  1 -> [ 1;                 ] % i
    |  2 -> [ 1;  1;             ] % ii
    |  3 -> [ 1;  1;  1;         ] % iii
    |  4 -> [ 1;  5;             ] % iv
    |  5 -> [ 5;                 ] % v
    |  6 -> [ 5;  1;             ] % vi
    |  7 -> [ 5;  1;  1;         ] % vii
    |  8 -> [ 5;  1;  1;  1;     ] % viii
    |  9 -> [ 1; 10;             ] % ix
    | 10 -> [10;                 ] % x
    | 11 -> [10;  1;             ] % xi
    | 12 -> [10;  1;  1;         ] % xii
    | 13 -> [10;  1;  1;  1;     ] % xiii
    | 14 -> [10;  1;  5;         ] % xiv
    | 15 -> [10;  5;             ] % xv
    | 16 -> [10;  5;  1;         ] % xvi
    | 17 -> [10;  5;  1;  1;     ] % xvii
    | 18 -> [10;  5;  1;  1;  1; ] % xviii
    | 19 -> [10;  1; 10;         ] % xix
    | 20 -> [10; 10;             ] % xx
    | 21 -> [10; 10;  1;         ] % xxi
    | 22 -> [10; 10;  1;  1;     ] % xxii
    | 23 -> [10; 10;  1;  1;  1; ] % xxiii
    | 24 -> [10; 10;  1;  5;     ] % xxiv
    | 25 -> [10; 10;  5;         ] % xxv
    |  _ -> [ 0;  0;             ] % ??

  let to-arabic num = embed-string (arabic num)

  let to-roman num =
    embed-string
      (string-unexplode
        (List.map (fun i -> num-to-roman-char false i) (roman-seq num)))
  let to-Roman num =
    embed-string
      (string-unexplode
        (List.map (fun i -> num-to-roman-char true i) (roman-seq num)))

  let to-alph num = embed-string (string-unexplode [num + 0x0060;])
  let to-Alph num = embed-string (string-unexplode [num + 0x0040;])
  % }}}

  % index-specify command {{{

  let label-width-ratio = 2.0  % ラベル幅: item-indent からラベル幅だけシフトした場所から本文が始まる

  let label-raw num-format ctx idx =
    let label-width = (get-font-size ctx) *' label-width-ratio in
    let it-num = num-format idx in
    let ib-label = read-inline ctx {#it-num;\ } in
    let (wid-label, _, _) = get-natural-metrics ib-label in
    inline-skip (label-width -' wid-label) ++ ib-label

  let label-dot num-format ctx idx =
    let label-width = (get-font-size ctx) *' label-width-ratio in
    let it-num = num-format idx in
    let ib-label = read-inline ctx {#it-num;.\ } in
    let (wid-label, _, _) = get-natural-metrics ib-label in
    inline-skip (label-width -' wid-label) ++ ib-label

  let label-paren num-format ctx idx =
    let label-width = (get-font-size ctx) *' label-width-ratio in
    let it-num = num-format idx in
    let ib-label = read-inline ctx {(#it-num;)\ } in
    let (wid-label, _, _) = get-natural-metrics ib-label in
    inline-skip (label-width -' wid-label) ++ ib-label

  let label-bracket num-format ctx idx =
    let label-width = (get-font-size ctx) *' label-width-ratio in
    let it-num = num-format idx in
    let ib-label = read-inline ctx {[#it-num;]\ } in
    let (wid-label, _, _) = get-natural-metrics ib-label in
    inline-skip (label-width -' wid-label) ++ ib-label


  let label-bullet ctx idx =
    let font-size = get-font-size ctx in
    let label-width = font-size *' label-width-ratio in
    let interval = font-size *' 0.3 in
    let circ ctx (x, y) =
      let cx = x +' label-width -' (font-size *' 0.3) -' interval in
      let cy = y +' font-size *' 0.3 in
      let r = font-size *' 0.15 in
      Gr.circle (cx, cy) r
    in
    inline-graphics label-width 8pt 0pt
      (fun (x, y) -> [fill Color.black (circ ctx (x, y))])

  let label-white-bullet ctx idx =
    let font-size = get-font-size ctx in
    let label-width = font-size *' label-width-ratio in
    let interval = font-size *' 0.3 in
    let circ ctx (x, y) =
      let cx = x +' label-width -' (font-size *' 0.3) -' interval in
      let cy = y +' font-size *' 0.3 in
      let r = font-size *' 0.12 in
      Gr.circle (cx, cy) r
    in
    inline-graphics label-width 8pt 0pt
      (fun (x, y) -> [stroke 1pt Color.black (circ ctx (x, y))])

  % }}}

end

let label-arabic-raw = Enumitem.label-raw Enumitem.to-arabic
let  label-roman-raw = Enumitem.label-raw Enumitem.to-roman
let  label-Roman-raw = Enumitem.label-raw Enumitem.to-Roman
let   label-alph-raw = Enumitem.label-raw Enumitem.to-alph
let   label-Alph-raw = Enumitem.label-raw Enumitem.to-Alph

let label-arabic-dot = Enumitem.label-dot Enumitem.to-arabic
let  label-roman-dot = Enumitem.label-dot Enumitem.to-roman
let  label-Roman-dot = Enumitem.label-dot Enumitem.to-Roman
let   label-alph-dot = Enumitem.label-dot Enumitem.to-alph
let   label-Alph-dot = Enumitem.label-dot Enumitem.to-Alph

let label-arabic-paren = Enumitem.label-paren Enumitem.to-arabic
let  label-roman-paren = Enumitem.label-paren Enumitem.to-roman
let  label-Roman-paren = Enumitem.label-paren Enumitem.to-Roman
let   label-alph-paren = Enumitem.label-paren Enumitem.to-alph
let   label-Alph-paren = Enumitem.label-paren Enumitem.to-Alph

let label-arabic-bracket = Enumitem.label-bracket Enumitem.to-arabic
let  label-roman-bracket = Enumitem.label-bracket Enumitem.to-roman
let  label-Roman-bracket = Enumitem.label-bracket Enumitem.to-Roman
let   label-alph-bracket = Enumitem.label-bracket Enumitem.to-alph
let   label-Alph-bracket = Enumitem.label-bracket Enumitem.to-Alph

let label-bullet = Enumitem.label-bullet
let label-white-bullet = Enumitem.label-white-bullet

let-block +listing item = '< +genlisting(label-bullet)(item); >

let default-enum-rule depth =
  match depth with
  | 0 -> label-arabic-dot
  | 1 -> label-roman-dot
  | 2 -> label-alph-paren
  | _ -> label-arabic-raw

let-block +enumerate item = '< +genlistings(default-enum-rule)(item); >

let-inline \listing item = {\listing-from-block<+listing(item);>} 
let-inline \enumerate item = {\listing-from-block<+enumerate(item);>} 
