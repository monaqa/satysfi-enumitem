@require: base/list-ext
@require: base/length
@require: base/color-ext
@require: gr

type labelwithemptybody =
  | LabelDisplay  % テキストが空でもかまわずラベルを描画する。
  | LabelInherit  % ラベルは描画せず、自身の子要素があればそこでラベルを一緒に描画してもらう。
  | LabelIgnore   % ラベルを描かず、継承もしない。

type itemconfig = (|
  % 基準となるインデントの量。
  % 本文の左端から indent-base だけ右にずらした線を基準線とよび、
  % ラベルの揃え方や本文のインデント量はこの基準線をもとに設定される。
  indent-base: length -> length;

  % ラベルの直後に来るテキストのインデントの量。
  % args:
  %   width (length): ラベルのインラインボックス列の横幅。
  indent-start: length -> length;

  % 現在のアイテムのインデックスを与えて、ラベルのインラインボックス列を返す。
  label: inline-boxes;

  % ラベルに対応するテキストが空のとき、ラベルの描画をどのように行うか。
  label-with-empty-body: labelwithemptybody;

  % 箇条書きの段落の上に追加であける余白（paragraph-margin による余白はそのまま入る）。
  margin-top: length;

  % 箇条書きの段落の下に追加であける余白（paragraph-margin による余白はそのまま入る）。
  margin-bottom: length;

  % 中身の context を変換する関数。
  context-inner: (context -> context);
|)

module EnumitemFormat : sig

% builder
  val init : context -> int list -> itemconfig
  val default : itemconfig

end = struct

  let default = (|
    indent-base = (fun _ -> 0pt);
    indent-start = (fun _ -> 0pt);
    label = inline-nil;
    label-with-empty-body = LabelIgnore;
    margin-top = 0pt;
    margin-bottom = 0pt;
    context-inner = (fun ctx -> ctx);
  |)

  let init _ _ = default

% setter

end
